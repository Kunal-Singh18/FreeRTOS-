
1_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e0  080072e0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e8  080072e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080072f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000145d0  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014634  20014634  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013d94  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e6c  00000000  00000000  00033e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001350  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eda  00000000  00000000  00038028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104c7  00000000  00000000  00038f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000064b2  00000000  00000000  000493c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005610  00000000  00000000  0004f87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00054e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007134 	.word	0x08007134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007134 	.word	0x08007134

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f14 	.word	0x20012f14
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb6d 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f84f 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8b7 	bl	800078c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  DWT_CTRL |=(1U<<0);
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <main+0x90>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1e      	ldr	r2, [pc, #120]	; (800069c <main+0x90>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062a:	f003 fff1 	bl	8004610 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800062e:	f005 fb27 	bl	8005c80 <SEGGER_SYSVIEW_Start>

  status1= xTaskCreate(task1_handler, "task1",200,"hello there ",2, &task1_handle);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <main+0x94>)
 800063c:	22c8      	movs	r2, #200	; 0xc8
 800063e:	4919      	ldr	r1, [pc, #100]	; (80006a4 <main+0x98>)
 8000640:	4819      	ldr	r0, [pc, #100]	; (80006a8 <main+0x9c>)
 8000642:	f002 f93b 	bl	80028bc <xTaskCreate>
 8000646:	6178      	str	r0, [r7, #20]

  configASSERT(status1==pdPASS);// it will pass 1 when true
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00a      	beq.n	8000664 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000660:	bf00      	nop
 8000662:	e7fe      	b.n	8000662 <main+0x56>

  status2= xTaskCreate(task2_handler, "task2",200,"what the hack ",2, &task2_handle);
 8000664:	463b      	mov	r3, r7
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <main+0xa0>)
 800066e:	22c8      	movs	r2, #200	; 0xc8
 8000670:	490f      	ldr	r1, [pc, #60]	; (80006b0 <main+0xa4>)
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0xa8>)
 8000674:	f002 f922 	bl	80028bc <xTaskCreate>
 8000678:	6138      	str	r0, [r7, #16]

  configASSERT(status2==pdPASS);// used for debugging
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00a      	beq.n	8000696 <main+0x8a>
        __asm volatile
 8000680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000684:	f383 8811 	msr	BASEPRI, r3
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	f3bf 8f4f 	dsb	sy
 8000690:	60bb      	str	r3, [r7, #8]
    }
 8000692:	bf00      	nop
 8000694:	e7fe      	b.n	8000694 <main+0x88>

  //start the freeRTOS scheduler
   vTaskStartScheduler();
 8000696:	f002 fa8b 	bl	8002bb0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x8e>
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	0800714c 	.word	0x0800714c
 80006a4:	0800715c 	.word	0x0800715c
 80006a8:	08000a49 	.word	0x08000a49
 80006ac:	08007164 	.word	0x08007164
 80006b0:	08007174 	.word	0x08007174
 80006b4:	08000a85 	.word	0x08000a85

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 f8a8 	bl	800681c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fdb1 	bl	80012a4 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f9cc 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f812 	bl	8001794 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f9b5 	bl	8000ae4 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba2      	ldr	r3, [pc, #648]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa1      	ldr	r2, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9f      	ldr	r3, [pc, #636]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9b      	ldr	r3, [pc, #620]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b94      	ldr	r3, [pc, #592]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a93      	ldr	r2, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8c      	ldr	r2, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b86      	ldr	r3, [pc, #536]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a85      	ldr	r2, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b7f      	ldr	r3, [pc, #508]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7e      	ldr	r2, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4879      	ldr	r0, [pc, #484]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000850:	f000 fd0e 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4877      	ldr	r0, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800085a:	f000 fd09 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4875      	ldr	r0, [pc, #468]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000866:	f000 fd03 	bl	8001270 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	486c      	ldr	r0, [pc, #432]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000882:	f000 fb59 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4866      	ldr	r0, [pc, #408]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb4b 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	485e      	ldr	r0, [pc, #376]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80008be:	f000 fb3b 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	485a      	ldr	r0, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fb2e 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008dc:	2310      	movs	r3, #16
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ec:	2306      	movs	r3, #6
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4852      	ldr	r0, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fb1e 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008fc:	23e0      	movs	r3, #224	; 0xe0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090c:	2305      	movs	r3, #5
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	484a      	ldr	r0, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000918:	f000 fb0e 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000930:	f000 fb02 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	483c      	ldr	r0, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000952:	f000 faf1 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000956:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4833      	ldr	r0, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000970:	f000 fae2 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 8000992:	f000 fad1 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ac:	f000 fac4 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c2:	230a      	movs	r3, #10
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ce:	f000 fab3 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 80009e6:	f000 faa7 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000a08:	f000 fa96 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000a22:	f000 fa89 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	char buff[100];
	while(1)
	{
		snprintf(buff,100,"%s\n",(char*)parameters);
 8000a50:	f107 000c 	add.w	r0, r7, #12
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <task1_handler+0x34>)
 8000a58:	2164      	movs	r1, #100	; 0x64
 8000a5a:	f005 fe9b 	bl	8006794 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(buff);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f005 fe26 	bl	80066b4 <SEGGER_SYSVIEW_PrintfTarget>
		// printf("%s\n",(char*)parameters); we used  snprintf()  in  place  of  printf()
		taskYIELD();
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <task1_handler+0x38>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
		snprintf(buff,100,"%s\n",(char*)parameters);
 8000a78:	e7ea      	b.n	8000a50 <task1_handler+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	0800717c 	.word	0x0800717c
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <task2_handler>:
	}
}
static void task2_handler(void * parameters)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	char buff[100];
	while(1)
		{
		snprintf(buff,100,"%s\n",(char*)parameters);
 8000a8c:	f107 000c 	add.w	r0, r7, #12
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <task2_handler+0x34>)
 8000a94:	2164      	movs	r1, #100	; 0x64
 8000a96:	f005 fe7d 	bl	8006794 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(buff);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fe08 	bl	80066b4 <SEGGER_SYSVIEW_PrintfTarget>
			//printf("%s\n",(char*)parameters);
		 taskYIELD();
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <task2_handler+0x38>)
 8000aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	f3bf 8f6f 	isb	sy
		snprintf(buff,100,"%s\n",(char*)parameters);
 8000ab4:	e7ea      	b.n	8000a8c <task2_handler+0x8>
 8000ab6:	bf00      	nop
 8000ab8:	0800717c 	.word	0x0800717c
 8000abc:	e000ed04 	.word	0xe000ed04

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 f92f 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();
 8000b2e:	f003 f9eb 	bl	8003f08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a32      	ldr	r2, [pc, #200]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f818 	bl	8001bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b86:	f000 fffd 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b8c:	e004      	b.n	8000b98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b8e:	f000 fff9 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b92:	4603      	mov	r3, r0
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <HAL_InitTick+0xe8>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	0c9b      	lsrs	r3, r3, #18
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_InitTick+0xec>)
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <HAL_InitTick+0xf0>)
 8000baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_InitTick+0xec>)
 8000bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_InitTick+0xec>)
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <HAL_InitTick+0xec>)
 8000bce:	f001 f81f 	bl	8001c10 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11b      	bne.n	8000c18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <HAL_InitTick+0xec>)
 8000be2:	f001 f86f 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 f991 	bl	8000f1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d808      	bhi.n	8000c12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 f96d 	bl	8000ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0xf4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e002      	b.n	8000c18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	431bde83 	.word	0x431bde83
 8000c2c:	20000080 	.word	0x20000080
 8000c30:	40001000 	.word	0x40001000
 8000c34:	20000004 	.word	0x20000004

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM6_DAC_IRQHandler+0x10>)
 8000c6a:	f001 f89b 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000080 	.word	0x20000080

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffd7 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f005 fdaf 	bl	800682c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc9d 	bl	800060c <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ce0:	080072f0 	.word	0x080072f0
  ldr r2, =_sbss
 8000ce4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ce8:	20014634 	.word	0x20014634

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f8d8 	bl	8000ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff0e 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fee4 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200000c8 	.word	0x200000c8

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200000c8 	.word	0x200000c8

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff4c 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff61 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb1 	bl	8000e68 <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff80 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff54 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e16b      	b.n	800122c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 815a 	bne.w	8001226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80b4 	beq.w	8001226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b60      	ldr	r3, [pc, #384]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a5f      	ldr	r2, [pc, #380]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <HAL_GPIO_Init+0x310>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x314>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d02b      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x318>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x31c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x320>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x21a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x324>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x216>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x328>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x212>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x32c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <HAL_GPIO_Init+0x330>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x20a>
 800113e:	2307      	movs	r3, #7
 8001140:	e00e      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001142:	2308      	movs	r3, #8
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001146:	2306      	movs	r3, #6
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_GPIO_Init+0x334>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a32      	ldr	r2, [pc, #200]	; (800126c <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_GPIO_Init+0x334>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_GPIO_Init+0x334>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_GPIO_Init+0x334>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_GPIO_Init+0x334>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_GPIO_Init+0x334>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae90 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40021c00 	.word	0x40021c00
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e267      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcfe 	bl	8000d5c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcfa 	bl	8000d5c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e207      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcea 	bl	8000d5c <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fce6 	bl	8000d5c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f3      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc9f 	bl	8000d5c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc9b 	bl	8000d5c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a8      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc7e 	bl	8000d5c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc7a 	bl	8000d5c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e187      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc5e 	bl	8000d5c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc5a 	bl	8000d5c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e167      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc47 	bl	8000d5c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc43 	bl	8000d5c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e150      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fc03 	bl	8000d5c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbff 	bl	8000d5c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e10c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fbc4 	bl	8000d5c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fbc0 	bl	8000d5c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0cb      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbae 	bl	8000d5c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fbaa 	bl	8000d5c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a1 	beq.w	8001784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb7e 	bl	8000d5c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb7a 	bl	8000d5c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb53 	bl	8000d5c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb4f 	bl	8000d5c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e05c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb3c 	bl	8000d5c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb38 	bl	8000d5c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d028      	beq.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d121      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa6a 	bl	8000d5c <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa66 	bl	8000d5c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f900 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	0800725c 	.word	0x0800725c
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80e1 	bhi.w	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0db      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001998:	e0db      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199e:	e0d8      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0159      	lsls	r1, r3, #5
 80019e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e4:	0150      	lsls	r0, r2, #5
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a51      	subs	r1, r2, r1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb63 0301 	sbc.w	r3, r3, r1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a04:	4659      	mov	r1, fp
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	4651      	mov	r1, sl
 8001a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0e:	4651      	mov	r1, sl
 8001a10:	018a      	lsls	r2, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ebb2 0801 	subs.w	r8, r2, r1
 8001a18:	4659      	mov	r1, fp
 8001a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a32:	4690      	mov	r8, r2
 8001a34:	4699      	mov	r9, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	eb18 0303 	adds.w	r3, r8, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	eb49 0303 	adc.w	r3, r9, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a52:	4629      	mov	r1, r5
 8001a54:	024b      	lsls	r3, r1, #9
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	024a      	lsls	r2, r1, #9
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a70:	f7fe fc4e 	bl	8000310 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fbf4 	bl	8000310 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0a9b      	lsrs	r3, r3, #10
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	0800726c 	.word	0x0800726c

08001bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	220f      	movs	r2, #15
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetClockConfig+0x60>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0207 	and.w	r2, r3, #7
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9d8 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04e      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d01d      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ee 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8e0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8f1 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8c4 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8b6 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8c7 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f89a 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f88c 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f89d 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f870 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f862 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f873 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fdcc 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f902 	bl	8002158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f838 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8cc 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d027      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d023      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 0208 	add.w	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d103      	bne.n	80021e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e00c      	b.n	8002200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3308      	adds	r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e002      	b.n	80021f4 <vListInsert+0x2e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d2f6      	bcs.n	80021ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	601a      	str	r2, [r3, #0]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6892      	ldr	r2, [r2, #8]
 800224e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6852      	ldr	r2, [r2, #4]
 8002258:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d103      	bne.n	800226c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1e5a      	subs	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <xQueueGenericReset+0x2e>
        __asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	60fb      	str	r3, [r7, #12]
    }
 80022b6:	bf00      	nop
 80022b8:	e7fe      	b.n	80022b8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d052      	beq.n	8002366 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d04e      	beq.n	8002366 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2100      	movs	r1, #0
 80022d2:	fba3 2302 	umull	r2, r3, r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d000      	beq.n	80022dc <xQueueGenericReset+0x50>
 80022da:	2101      	movs	r1, #1
 80022dc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d141      	bne.n	8002366 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80022e2:	f001 fe8f 	bl	8004004 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	441a      	add	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2200      	movs	r2, #0
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	3b01      	subs	r3, #1
 8002314:	6939      	ldr	r1, [r7, #16]
 8002316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	441a      	add	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	22ff      	movs	r2, #255	; 0xff
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00f      	beq.n	8002360 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3310      	adds	r3, #16
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ff85 	bl	8003254 <xTaskRemoveFromEventList>
 800234a:	e009      	b.n	8002360 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3310      	adds	r3, #16
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff0b 	bl	800216c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3324      	adds	r3, #36	; 0x24
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff06 	bl	800216c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002360:	f001 fe80 	bl	8004064 <vPortExitCritical>
 8002364:	e001      	b.n	800236a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <xQueueGenericReset+0xfa>
        __asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	60bb      	str	r3, [r7, #8]
    }
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002386:	697b      	ldr	r3, [r7, #20]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02e      	beq.n	8002406 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023a8:	2100      	movs	r1, #0
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	fba3 2302 	umull	r2, r3, r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d000      	beq.n	80023b8 <xQueueGenericCreate+0x28>
 80023b6:	2101      	movs	r1, #1
 80023b8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d123      	bne.n	8002406 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023ca:	d81c      	bhi.n	8002406 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3350      	adds	r3, #80	; 0x50
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 ff3e 	bl	800425c <pvPortMalloc>
 80023e0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01c      	beq.n	8002422 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f814 	bl	800242c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002404:	e00d      	b.n	8002422 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <xQueueGenericCreate+0x92>
        __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	613b      	str	r3, [r7, #16]
    }
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002422:	69fb      	ldr	r3, [r7, #28]
    }
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e002      	b.n	800244e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800245a:	2101      	movs	r1, #1
 800245c:	69b8      	ldr	r0, [r7, #24]
 800245e:	f7ff ff15 	bl	800228c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	2073      	movs	r0, #115	; 0x73
 8002472:	f003 fafd 	bl	8005a70 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08f      	sub	sp, #60	; 0x3c
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800248c:	2300      	movs	r3, #0
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <xQueueReceive+0x30>
        __asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	623b      	str	r3, [r7, #32]
    }
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <xQueueReceive+0x3e>
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <xQueueReceive+0x42>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <xQueueReceive+0x44>
 80024c2:	2300      	movs	r3, #0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <xQueueReceive+0x5e>
        __asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	61fb      	str	r3, [r7, #28]
    }
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024de:	f001 f8c5 	bl	800366c <xTaskGetSchedulerState>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <xQueueReceive+0x6e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <xQueueReceive+0x72>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueReceive+0x74>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueReceive+0x8e>
        __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	61bb      	str	r3, [r7, #24]
    }
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800250e:	f001 fd79 	bl	8004004 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002522:	f000 f8b3 	bl	800268c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	4618      	mov	r0, r3
 800252a:	f003 ffcd 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 800252e:	4604      	mov	r4, r0
 8002530:	2000      	movs	r0, #0
 8002532:	f003 ffc9 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2101      	movs	r1, #1
 800253c:	9100      	str	r1, [sp, #0]
 800253e:	4621      	mov	r1, r4
 8002540:	205c      	movs	r0, #92	; 0x5c
 8002542:	f003 fb0b 	bl	8005b5c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	3310      	adds	r3, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fe7a 	bl	8003254 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002560:	f001 fd80 	bl	8004064 <vPortExitCritical>
                return pdPASS;
 8002564:	2301      	movs	r3, #1
 8002566:	e08a      	b.n	800267e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800256e:	f001 fd79 	bl	8004064 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	4618      	mov	r0, r3
 8002576:	f003 ffa7 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 800257a:	4604      	mov	r4, r0
 800257c:	2000      	movs	r0, #0
 800257e:	f003 ffa3 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2101      	movs	r1, #1
 8002588:	9100      	str	r1, [sp, #0]
 800258a:	4621      	mov	r1, r4
 800258c:	205c      	movs	r0, #92	; 0x5c
 800258e:	f003 fae5 	bl	8005b5c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002592:	2300      	movs	r3, #0
 8002594:	e073      	b.n	800267e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 ff2f 	bl	8003404 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025aa:	f001 fd5b 	bl	8004064 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025ae:	f000 fb61 	bl	8002c74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025b2:	f001 fd27 	bl	8004004 <vPortEnterCritical>
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d103      	bne.n	80025cc <xQueueReceive+0x14c>
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d103      	bne.n	80025e2 <xQueueReceive+0x162>
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e2:	f001 fd3f 	bl	8004064 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025e6:	1d3a      	adds	r2, r7, #4
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ff1e 	bl	8003430 <xTaskCheckForTimeOut>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d124      	bne.n	8002644 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fc:	f000 f8be 	bl	800277c <prvIsQueueEmpty>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	3324      	adds	r3, #36	; 0x24
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fdb4 	bl	800317c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002616:	f000 f85f 	bl	80026d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800261a:	f000 fb39 	bl	8002c90 <xTaskResumeAll>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f47f af74 	bne.w	800250e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <xQueueReceive+0x208>)
 8002628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	e76a      	b.n	800250e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263a:	f000 f84d 	bl	80026d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800263e:	f000 fb27 	bl	8002c90 <xTaskResumeAll>
 8002642:	e764      	b.n	800250e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002646:	f000 f847 	bl	80026d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800264a:	f000 fb21 	bl	8002c90 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800264e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002650:	f000 f894 	bl	800277c <prvIsQueueEmpty>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	f43f af59 	beq.w	800250e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	4618      	mov	r0, r3
 8002660:	f003 ff32 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 8002664:	4604      	mov	r4, r0
 8002666:	2000      	movs	r0, #0
 8002668:	f003 ff2e 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2101      	movs	r1, #1
 8002672:	9100      	str	r1, [sp, #0]
 8002674:	4621      	mov	r1, r4
 8002676:	205c      	movs	r0, #92	; 0x5c
 8002678:	f003 fa70 	bl	8005b5c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800267c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800267e:	4618      	mov	r0, r3
 8002680:	3734      	adds	r7, #52	; 0x34
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	441a      	add	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d303      	bcc.n	80026c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	461a      	mov	r2, r3
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f004 f8d4 	bl	8006878 <memcpy>
    }
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026e0:	f001 fc90 	bl	8004004 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026ec:	e011      	b.n	8002712 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d012      	beq.n	800271c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3324      	adds	r3, #36	; 0x24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fdaa 	bl	8003254 <xTaskRemoveFromEventList>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002706:	f000 fef9 	bl	80034fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	dce9      	bgt.n	80026ee <prvUnlockQueue+0x16>
 800271a:	e000      	b.n	800271e <prvUnlockQueue+0x46>
                    break;
 800271c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002726:	f001 fc9d 	bl	8004064 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800272a:	f001 fc6b 	bl	8004004 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002734:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002736:	e011      	b.n	800275c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3310      	adds	r3, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fd85 	bl	8003254 <xTaskRemoveFromEventList>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002750:	f000 fed4 	bl	80034fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002754:	7bbb      	ldrb	r3, [r7, #14]
 8002756:	3b01      	subs	r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800275c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002760:	2b00      	cmp	r3, #0
 8002762:	dce9      	bgt.n	8002738 <prvUnlockQueue+0x60>
 8002764:	e000      	b.n	8002768 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002766:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002770:	f001 fc78 	bl	8004064 <vPortExitCritical>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002784:	f001 fc3e 	bl	8004004 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002790:	2301      	movs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e001      	b.n	800279a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800279a:	f001 fc63 	bl	8004064 <vPortExitCritical>

    return xReturn;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	60fb      	str	r3, [r7, #12]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d024      	beq.n	8002822 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e01e      	b.n	800281c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <vQueueAddToRegistry+0xa8>)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d105      	bne.n	80027fa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <vQueueAddToRegistry+0xa8>)
 80027f4:	4413      	add	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
                    break;
 80027f8:	e013      	b.n	8002822 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <vQueueAddToRegistry+0x6e>
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <vQueueAddToRegistry+0xa8>)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <vQueueAddToRegistry+0xa8>)
 8002812:	4413      	add	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b07      	cmp	r3, #7
 8002820:	d9dd      	bls.n	80027de <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00f      	beq.n	8002848 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fe46 	bl	80064c8 <SEGGER_SYSVIEW_ShrinkId>
 800283c:	4601      	mov	r1, r0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	2071      	movs	r0, #113	; 0x71
 8002844:	f003 f8ba 	bl	80059bc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002848:	bf00      	nop
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200000cc 	.word	0x200000cc

08002854 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002864:	f001 fbce 	bl	8004004 <vPortEnterCritical>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286e:	b25b      	sxtb	r3, r3
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d103      	bne.n	800287e <vQueueWaitForMessageRestricted+0x2a>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002884:	b25b      	sxtb	r3, r3
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d103      	bne.n	8002894 <vQueueWaitForMessageRestricted+0x40>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002894:	f001 fbe6 	bl	8004064 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fc8b 	bl	80031c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff12 	bl	80026d8 <prvUnlockQueue>
    }
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fcc3 	bl	800425c <pvPortMalloc>
 80028d6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028de:	2058      	movs	r0, #88	; 0x58
 80028e0:	f001 fcbc 	bl	800425c <pvPortMalloc>
 80028e4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028ec:	2258      	movs	r2, #88	; 0x58
 80028ee:	2100      	movs	r1, #0
 80028f0:	69f8      	ldr	r0, [r7, #28]
 80028f2:	f003 ff93 	bl	800681c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
 80028fc:	e005      	b.n	800290a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f001 fd66 	bl	80043d0 <vPortFree>
 8002904:	e001      	b.n	800290a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	2300      	movs	r3, #0
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f80e 	bl	8002948 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800292c:	69f8      	ldr	r0, [r7, #28]
 800292e:	f000 f899 	bl	8002a64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e002      	b.n	800293e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800293e:	69bb      	ldr	r3, [r7, #24]
    }
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	461a      	mov	r2, r3
 8002960:	21a5      	movs	r1, #165	; 0xa5
 8002962:	f003 ff5b 	bl	800681c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002970:	3b01      	subs	r3, #1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <prvInitialiseNewTask+0x58>
        __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	617b      	str	r3, [r7, #20]
    }
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01e      	beq.n	80029e4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e012      	b.n	80029d2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	7819      	ldrb	r1, [r3, #0]
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	3334      	adds	r3, #52	; 0x34
 80029bc:	460a      	mov	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d9e9      	bls.n	80029ac <prvInitialiseNewTask+0x64>
 80029d8:	e000      	b.n	80029dc <prvInitialiseNewTask+0x94>
            {
                break;
 80029da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d90a      	bls.n	8002a00 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	613b      	str	r3, [r7, #16]
    }
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d901      	bls.n	8002a0a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a06:	2304      	movs	r3, #4
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	3304      	adds	r3, #4
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fbc6 	bl	80021ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3318      	adds	r3, #24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fbc1 	bl	80021ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	f1c3 0205 	rsb	r2, r3, #5
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	69b8      	ldr	r0, [r7, #24]
 8002a46:	f001 f933 	bl	8003cb0 <pxPortInitialiseStack>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a6c:	f001 faca 	bl	8004004 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <prvAddNewTaskToReadyList+0x134>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <prvAddNewTaskToReadyList+0x134>)
 8002a78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a7a:	4b48      	ldr	r3, [pc, #288]	; (8002b9c <prvAddNewTaskToReadyList+0x138>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a82:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <prvAddNewTaskToReadyList+0x138>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <prvAddNewTaskToReadyList+0x134>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d110      	bne.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a90:	f000 fd52 	bl	8003538 <prvInitialiseTaskLists>
 8002a94:	e00d      	b.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <prvAddNewTaskToReadyList+0x13c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <prvAddNewTaskToReadyList+0x138>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d802      	bhi.n	8002ab2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002aac:	4a3b      	ldr	r2, [pc, #236]	; (8002b9c <prvAddNewTaskToReadyList+0x138>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <prvAddNewTaskToReadyList+0x140>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <prvAddNewTaskToReadyList+0x140>)
 8002aba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <prvAddNewTaskToReadyList+0x140>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <prvAddNewTaskToReadyList+0x94>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fc35 	bl	800633c <SEGGER_SYSVIEW_OnTaskCreate>
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461c      	mov	r4, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	1ae3      	subs	r3, r4, r3
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	462b      	mov	r3, r5
 8002af4:	f001 fe2e 	bl	8004754 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fca2 	bl	8006444 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <prvAddNewTaskToReadyList+0x144>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <prvAddNewTaskToReadyList+0x144>)
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b16:	4925      	ldr	r1, [pc, #148]	; (8002bac <prvAddNewTaskToReadyList+0x148>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3304      	adds	r3, #4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	3204      	adds	r2, #4
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <prvAddNewTaskToReadyList+0x148>)
 8002b56:	441a      	add	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	4912      	ldr	r1, [pc, #72]	; (8002bac <prvAddNewTaskToReadyList+0x148>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1c59      	adds	r1, r3, #1
 8002b70:	480e      	ldr	r0, [pc, #56]	; (8002bac <prvAddNewTaskToReadyList+0x148>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4403      	add	r3, r0
 8002b7c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b7e:	f001 fa71 	bl	8004064 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <prvAddNewTaskToReadyList+0x13c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <prvAddNewTaskToReadyList+0x138>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200001e4 	.word	0x200001e4
 8002b9c:	2000010c 	.word	0x2000010c
 8002ba0:	200001f0 	.word	0x200001f0
 8002ba4:	20000200 	.word	0x20000200
 8002ba8:	200001ec 	.word	0x200001ec
 8002bac:	20000110 	.word	0x20000110

08002bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <vTaskStartScheduler+0xa4>)
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2282      	movs	r2, #130	; 0x82
 8002bc2:	4925      	ldr	r1, [pc, #148]	; (8002c58 <vTaskStartScheduler+0xa8>)
 8002bc4:	4825      	ldr	r0, [pc, #148]	; (8002c5c <vTaskStartScheduler+0xac>)
 8002bc6:	f7ff fe79 	bl	80028bc <xTaskCreate>
 8002bca:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002bd2:	f000 fde9 	bl	80037a8 <xTimerCreateTimerTask>
 8002bd6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d124      	bne.n	8002c28 <vTaskStartScheduler+0x78>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	60bb      	str	r3, [r7, #8]
    }
 8002bf0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <vTaskStartScheduler+0xb0>)
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <vTaskStartScheduler+0xb4>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <vTaskStartScheduler+0xb8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <vTaskStartScheduler+0xbc>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <vTaskStartScheduler+0xa4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d102      	bne.n	8002c18 <vTaskStartScheduler+0x68>
 8002c12:	f003 fb77 	bl	8006304 <SEGGER_SYSVIEW_OnIdle>
 8002c16:	e004      	b.n	8002c22 <vTaskStartScheduler+0x72>
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <vTaskStartScheduler+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fbcf 	bl	80063c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c22:	f001 f8cf 	bl	8003dc4 <xPortStartScheduler>
 8002c26:	e00e      	b.n	8002c46 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d10a      	bne.n	8002c46 <vTaskStartScheduler+0x96>
        __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	607b      	str	r3, [r7, #4]
    }
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <vTaskStartScheduler+0xc0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000208 	.word	0x20000208
 8002c58:	08007180 	.word	0x08007180
 8002c5c:	08003515 	.word	0x08003515
 8002c60:	20000204 	.word	0x20000204
 8002c64:	200001f0 	.word	0x200001f0
 8002c68:	200001e8 	.word	0x200001e8
 8002c6c:	2000010c 	.word	0x2000010c
 8002c70:	2000000c 	.word	0x2000000c

08002c74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <vTaskSuspendAll+0x18>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <vTaskSuspendAll+0x18>)
 8002c80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	2000020c 	.word	0x2000020c

08002c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <xTaskResumeAll+0x1c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xTaskResumeAll+0x2c>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	607b      	str	r3, [r7, #4]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cbc:	f001 f9a2 	bl	8004004 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cc0:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <xTaskResumeAll+0x1c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <xTaskResumeAll+0x1c4>)
 8002cc8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cca:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <xTaskResumeAll+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80b8 	bne.w	8002e44 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cd4:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <xTaskResumeAll+0x1c8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80b3 	beq.w	8002e44 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cde:	e08e      	b.n	8002dfe <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <xTaskResumeAll+0x1cc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	6a12      	ldr	r2, [r2, #32]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	69d2      	ldr	r2, [r2, #28]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3318      	adds	r3, #24
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d103      	bne.n	8002d16 <xTaskResumeAll+0x86>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	68d2      	ldr	r2, [r2, #12]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3304      	adds	r3, #4
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d103      	bne.n	8002d54 <xTaskResumeAll+0xc4>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fb6c 	bl	8006444 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <xTaskResumeAll+0x1d0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	4a39      	ldr	r2, [pc, #228]	; (8002e60 <xTaskResumeAll+0x1d0>)
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	4938      	ldr	r1, [pc, #224]	; (8002e64 <xTaskResumeAll+0x1d4>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	3204      	adds	r2, #4
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <xTaskResumeAll+0x1d4>)
 8002dc2:	441a      	add	r2, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	4925      	ldr	r1, [pc, #148]	; (8002e64 <xTaskResumeAll+0x1d4>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	4821      	ldr	r0, [pc, #132]	; (8002e64 <xTaskResumeAll+0x1d4>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4403      	add	r3, r0
 8002de8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <xTaskResumeAll+0x1d8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <xTaskResumeAll+0x1dc>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <xTaskResumeAll+0x1cc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f47f af6c 	bne.w	8002ce0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e0e:	f000 fc11 	bl	8003634 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xTaskResumeAll+0x1e0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e1e:	f000 f84b 	bl	8002eb8 <xTaskIncrementTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTaskResumeAll+0x1dc>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f1      	bne.n	8002e1e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <xTaskResumeAll+0x1e0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <xTaskResumeAll+0x1dc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e44:	f001 f90e 	bl	8004064 <vPortExitCritical>

    return xAlreadyYielded;
 8002e48:	697b      	ldr	r3, [r7, #20]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000020c 	.word	0x2000020c
 8002e58:	200001e4 	.word	0x200001e4
 8002e5c:	200001a4 	.word	0x200001a4
 8002e60:	200001ec 	.word	0x200001ec
 8002e64:	20000110 	.word	0x20000110
 8002e68:	2000010c 	.word	0x2000010c
 8002e6c:	200001f8 	.word	0x200001f8
 8002e70:	200001f4 	.word	0x200001f4

08002e74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <xTaskGetTickCount+0x1c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200001e8 	.word	0x200001e8

08002e94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e9a:	f001 f99f 	bl	80041dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <xTaskGetTickCountFromISR+0x20>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ea8:	683b      	ldr	r3, [r7, #0]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200001e8 	.word	0x200001e8

08002eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <xTaskIncrementTick+0x1cc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 80d1 	bne.w	800306e <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ecc:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <xTaskIncrementTick+0x1d0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ed4:	4a6c      	ldr	r2, [pc, #432]	; (8003088 <xTaskIncrementTick+0x1d0>)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d120      	bne.n	8002f22 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <xTaskIncrementTick+0x1d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <xTaskIncrementTick+0x48>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xTaskIncrementTick+0x46>
 8002f00:	4b62      	ldr	r3, [pc, #392]	; (800308c <xTaskIncrementTick+0x1d4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	4b62      	ldr	r3, [pc, #392]	; (8003090 <xTaskIncrementTick+0x1d8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a60      	ldr	r2, [pc, #384]	; (800308c <xTaskIncrementTick+0x1d4>)
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4a60      	ldr	r2, [pc, #384]	; (8003090 <xTaskIncrementTick+0x1d8>)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <xTaskIncrementTick+0x1dc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a5e      	ldr	r2, [pc, #376]	; (8003094 <xTaskIncrementTick+0x1dc>)
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	f000 fb89 	bl	8003634 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f22:	4b5d      	ldr	r3, [pc, #372]	; (8003098 <xTaskIncrementTick+0x1e0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f0c0 80a5 	bcc.w	8003078 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <xTaskIncrementTick+0x1d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f38:	4b57      	ldr	r3, [pc, #348]	; (8003098 <xTaskIncrementTick+0x1e0>)
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3e:	601a      	str	r2, [r3, #0]
                    break;
 8002f40:	e09a      	b.n	8003078 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f42:	4b52      	ldr	r3, [pc, #328]	; (800308c <xTaskIncrementTick+0x1d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d203      	bcs.n	8002f62 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f5a:	4a4f      	ldr	r2, [pc, #316]	; (8003098 <xTaskIncrementTick+0x1e0>)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f60:	e08a      	b.n	8003078 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	6892      	ldr	r2, [r2, #8]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	3304      	adds	r3, #4
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d103      	bne.n	8002f90 <xTaskIncrementTick+0xd8>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01e      	beq.n	8002fe6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	6a12      	ldr	r2, [r2, #32]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	69d2      	ldr	r2, [r2, #28]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3318      	adds	r3, #24
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d103      	bne.n	8002fd6 <xTaskIncrementTick+0x11e>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fa2b 	bl	8006444 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <xTaskIncrementTick+0x1e4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <xTaskIncrementTick+0x1e4>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	4926      	ldr	r1, [pc, #152]	; (80030a0 <xTaskIncrementTick+0x1e8>)
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3304      	adds	r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	3204      	adds	r2, #4
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1d1a      	adds	r2, r3, #4
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <xTaskIncrementTick+0x1e8>)
 8003044:	441a      	add	r2, r3
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	4914      	ldr	r1, [pc, #80]	; (80030a0 <xTaskIncrementTick+0x1e8>)
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	4810      	ldr	r0, [pc, #64]	; (80030a0 <xTaskIncrementTick+0x1e8>)
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306c:	e75f      	b.n	8002f2e <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <xTaskIncrementTick+0x1ec>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <xTaskIncrementTick+0x1ec>)
 8003076:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000020c 	.word	0x2000020c
 8003088:	200001e8 	.word	0x200001e8
 800308c:	2000019c 	.word	0x2000019c
 8003090:	200001a0 	.word	0x200001a0
 8003094:	200001fc 	.word	0x200001fc
 8003098:	20000204 	.word	0x20000204
 800309c:	200001ec 	.word	0x200001ec
 80030a0:	20000110 	.word	0x20000110
 80030a4:	200001f4 	.word	0x200001f4

080030a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ae:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <vTaskSwitchContext+0xbc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <vTaskSwitchContext+0xc0>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80030bc:	e04d      	b.n	800315a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <vTaskSwitchContext+0xc0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <vTaskSwitchContext+0xc4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f1c3 031f 	rsb	r3, r3, #31
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	4925      	ldr	r1, [pc, #148]	; (8003170 <vTaskSwitchContext+0xc8>)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <vTaskSwitchContext+0x5c>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	607b      	str	r3, [r7, #4]
    }
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <vTaskSwitchContext+0x5a>
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <vTaskSwitchContext+0xc8>)
 8003110:	4413      	add	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3308      	adds	r3, #8
 8003126:	429a      	cmp	r2, r3
 8003128:	d104      	bne.n	8003134 <vTaskSwitchContext+0x8c>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <vTaskSwitchContext+0xcc>)
 800313c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <vTaskSwitchContext+0xcc>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <vTaskSwitchContext+0xd0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d102      	bne.n	8003150 <vTaskSwitchContext+0xa8>
 800314a:	f003 f8db 	bl	8006304 <SEGGER_SYSVIEW_OnIdle>
}
 800314e:	e004      	b.n	800315a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <vTaskSwitchContext+0xcc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f933 	bl	80063c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000020c 	.word	0x2000020c
 8003168:	200001f8 	.word	0x200001f8
 800316c:	200001ec 	.word	0x200001ec
 8003170:	20000110 	.word	0x20000110
 8003174:	2000010c 	.word	0x2000010c
 8003178:	20000208 	.word	0x20000208

0800317c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	60fb      	str	r3, [r7, #12]
    }
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <vTaskPlaceOnEventList+0x44>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3318      	adds	r3, #24
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f80b 	bl	80021c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031b0:	2101      	movs	r1, #1
 80031b2:	6838      	ldr	r0, [r7, #0]
 80031b4:	f000 fa78 	bl	80036a8 <prvAddCurrentTaskToDelayedList>
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	2000010c 	.word	0x2000010c

080031c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	613b      	str	r3, [r7, #16]
    }
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <vTaskPlaceOnEventListRestricted+0x8c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	621a      	str	r2, [r3, #32]
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	3218      	adds	r2, #24
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f103 0218 	add.w	r2, r3, #24
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <vTaskPlaceOnEventListRestricted+0x8c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800323a:	2024      	movs	r0, #36	; 0x24
 800323c:	f002 fb64 	bl	8005908 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f000 fa30 	bl	80036a8 <prvAddCurrentTaskToDelayedList>
    }
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	2000010c 	.word	0x2000010c

08003254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60fb      	str	r3, [r7, #12]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	6a12      	ldr	r2, [r2, #32]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	69d2      	ldr	r2, [r2, #28]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	3318      	adds	r3, #24
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d103      	bne.n	80032ae <xTaskRemoveFromEventList+0x5a>
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032be:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <xTaskRemoveFromEventList+0x198>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d162      	bne.n	800338c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	68d2      	ldr	r2, [r2, #12]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	6892      	ldr	r2, [r2, #8]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	3304      	adds	r3, #4
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d103      	bne.n	80032f4 <xTaskRemoveFromEventList+0xa0>
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2200      	movs	r2, #0
 80032f8:	615a      	str	r2, [r3, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1e5a      	subs	r2, r3, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	4618      	mov	r0, r3
 8003308:	f003 f89c 	bl	8006444 <SEGGER_SYSVIEW_OnTaskStartReady>
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <xTaskRemoveFromEventList+0x19c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <xTaskRemoveFromEventList+0x19c>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	4934      	ldr	r1, [pc, #208]	; (80033f4 <xTaskRemoveFromEventList+0x1a0>)
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3304      	adds	r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	3204      	adds	r2, #4
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <xTaskRemoveFromEventList+0x1a0>)
 8003362:	441a      	add	r2, r3
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4921      	ldr	r1, [pc, #132]	; (80033f4 <xTaskRemoveFromEventList+0x1a0>)
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	481d      	ldr	r0, [pc, #116]	; (80033f4 <xTaskRemoveFromEventList+0x1a0>)
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4403      	add	r3, r0
 8003388:	6019      	str	r1, [r3, #0]
 800338a:	e01b      	b.n	80033c4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <xTaskRemoveFromEventList+0x1a4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	61da      	str	r2, [r3, #28]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	3218      	adds	r2, #24
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f103 0218 	add.w	r2, r3, #24
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <xTaskRemoveFromEventList+0x1a4>)
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <xTaskRemoveFromEventList+0x1a4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <xTaskRemoveFromEventList+0x1a4>)
 80033c2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <xTaskRemoveFromEventList+0x1a8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d905      	bls.n	80033de <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <xTaskRemoveFromEventList+0x1ac>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e001      	b.n	80033e2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000020c 	.word	0x2000020c
 80033f0:	200001ec 	.word	0x200001ec
 80033f4:	20000110 	.word	0x20000110
 80033f8:	200001a4 	.word	0x200001a4
 80033fc:	2000010c 	.word	0x2000010c
 8003400:	200001f8 	.word	0x200001f8

08003404 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <vTaskInternalSetTimeOutState+0x24>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <vTaskInternalSetTimeOutState+0x28>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	605a      	str	r2, [r3, #4]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	200001fc 	.word	0x200001fc
 800342c:	200001e8 	.word	0x200001e8

08003430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	613b      	str	r3, [r7, #16]
    }
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	60fb      	str	r3, [r7, #12]
    }
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003472:	f000 fdc7 	bl	8004004 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <xTaskCheckForTimeOut+0xc4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d102      	bne.n	8003496 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	e026      	b.n	80034e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <xTaskCheckForTimeOut+0xc8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d00a      	beq.n	80034b8 <xTaskCheckForTimeOut+0x88>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d305      	bcc.n	80034b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e015      	b.n	80034e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d20b      	bcs.n	80034da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff98 	bl	8003404 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	e004      	b.n	80034e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034e4:	f000 fdbe 	bl	8004064 <vPortExitCritical>

    return xReturn;
 80034e8:	69fb      	ldr	r3, [r7, #28]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200001e8 	.word	0x200001e8
 80034f8:	200001fc 	.word	0x200001fc

080034fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <vTaskMissedYield+0x14>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	200001f8 	.word	0x200001f8

08003514 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800351c:	f000 f84c 	bl	80035b8 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <prvIdleTask+0x20>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003530:	e7f4      	b.n	800351c <prvIdleTask+0x8>
 8003532:	bf00      	nop
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	e00c      	b.n	800355e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <prvInitialiseTaskLists+0x60>)
 8003550:	4413      	add	r3, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fe0a 	bl	800216c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3301      	adds	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d9ef      	bls.n	8003544 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003564:	480d      	ldr	r0, [pc, #52]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003566:	f7fe fe01 	bl	800216c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800356a:	480d      	ldr	r0, [pc, #52]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800356c:	f7fe fdfe 	bl	800216c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <prvInitialiseTaskLists+0x6c>)
 8003572:	f7fe fdfb 	bl	800216c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <prvInitialiseTaskLists+0x70>)
 8003578:	f7fe fdf8 	bl	800216c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <prvInitialiseTaskLists+0x74>)
 800357e:	f7fe fdf5 	bl	800216c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <prvInitialiseTaskLists+0x78>)
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003586:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvInitialiseTaskLists+0x7c>)
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000110 	.word	0x20000110
 800359c:	20000174 	.word	0x20000174
 80035a0:	20000188 	.word	0x20000188
 80035a4:	200001a4 	.word	0x200001a4
 80035a8:	200001b8 	.word	0x200001b8
 80035ac:	200001d0 	.word	0x200001d0
 80035b0:	2000019c 	.word	0x2000019c
 80035b4:	200001a0 	.word	0x200001a0

080035b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035be:	e019      	b.n	80035f4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80035c0:	f000 fd20 	bl	8004004 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <prvCheckTasksWaitingTermination+0x50>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fe31 	bl	8002238 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4a0b      	ldr	r2, [pc, #44]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035de:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035e8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035ea:	f000 fd3b 	bl	8004064 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f810 	bl	8003614 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <prvCheckTasksWaitingTermination+0x58>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e1      	bne.n	80035c0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001b8 	.word	0x200001b8
 800360c:	200001e4 	.word	0x200001e4
 8003610:	200001cc 	.word	0x200001cc

08003614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fed5 	bl	80043d0 <vPortFree>
            vPortFree( pxTCB );
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fed2 	bl	80043d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <prvResetNextTaskUnblockTime+0x30>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <prvResetNextTaskUnblockTime+0x34>)
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800364a:	e005      	b.n	8003658 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <prvResetNextTaskUnblockTime+0x30>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <prvResetNextTaskUnblockTime+0x34>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000019c 	.word	0x2000019c
 8003668:	20000204 	.word	0x20000204

0800366c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <xTaskGetSchedulerState+0x34>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800367a:	2301      	movs	r3, #1
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e008      	b.n	8003692 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <xTaskGetSchedulerState+0x38>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003688:	2302      	movs	r3, #2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003692:	687b      	ldr	r3, [r7, #4]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	200001f0 	.word	0x200001f0
 80036a4:	2000020c 	.word	0x2000020c

080036a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <prvAddCurrentTaskToDelayedList+0xe4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fdba 	bl	8002238 <uxListRemove>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <prvAddCurrentTaskToDelayedList+0xec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4013      	ands	r3, r2
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <prvAddCurrentTaskToDelayedList+0xec>)
 80036e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d124      	bne.n	8003734 <prvAddCurrentTaskToDelayedList+0x8c>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d021      	beq.n	8003734 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	3204      	adds	r2, #4
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <prvAddCurrentTaskToDelayedList+0xf0>)
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003732:	e026      	b.n	8003782 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	d209      	bcs.n	8003760 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <prvAddCurrentTaskToDelayedList+0xf4>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fe fd34 	bl	80021c6 <vListInsert>
}
 800375e:	e010      	b.n	8003782 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe fd2a 	bl	80021c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	429a      	cmp	r2, r3
 800377a:	d202      	bcs.n	8003782 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6013      	str	r3, [r2, #0]
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200001e8 	.word	0x200001e8
 8003790:	2000010c 	.word	0x2000010c
 8003794:	200001ec 	.word	0x200001ec
 8003798:	200001d0 	.word	0x200001d0
 800379c:	200001a0 	.word	0x200001a0
 80037a0:	2000019c 	.word	0x2000019c
 80037a4:	20000204 	.word	0x20000204

080037a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037b2:	f000 fa47 	bl	8003c44 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <xTimerCreateTimerTask+0x54>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <xTimerCreateTimerTask+0x58>)
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2302      	movs	r3, #2
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037cc:	490d      	ldr	r1, [pc, #52]	; (8003804 <xTimerCreateTimerTask+0x5c>)
 80037ce:	480e      	ldr	r0, [pc, #56]	; (8003808 <xTimerCreateTimerTask+0x60>)
 80037d0:	f7ff f874 	bl	80028bc <xTaskCreate>
 80037d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	603b      	str	r3, [r7, #0]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80037f2:	687b      	ldr	r3, [r7, #4]
    }
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000240 	.word	0x20000240
 8003800:	20000244 	.word	0x20000244
 8003804:	08007188 	.word	0x08007188
 8003808:	080038b1 	.word	0x080038b1

0800380c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003818:	e008      	b.n	800382c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	18d1      	adds	r1, r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f8dd 	bl	80039f8 <prvInsertTimerInActiveList>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ea      	bne.n	800381a <prvReloadTimer+0xe>
        }
    }
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <prvProcessExpiredTimer+0x5c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3304      	adds	r3, #4
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fce5 	bl	8002238 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff ffc3 	bl	800380c <prvReloadTimer>
 8003886:	e008      	b.n	800389a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	4798      	blx	r3
    }
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000238 	.word	0x20000238

080038b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038b8:	f107 0308 	add.w	r3, r7, #8
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f857 	bl	8003970 <prvGetNextExpireTime>
 80038c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f803 	bl	80038d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038ce:	f000 f8d5 	bl	8003a7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038d2:	e7f1      	b.n	80038b8 <prvTimerTask+0x8>

080038d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038de:	f7ff f9c9 	bl	8002c74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f866 	bl	80039b8 <prvSampleTimeNow>
 80038ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d130      	bne.n	8003956 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <prvProcessTimerOrBlockTask+0x3c>
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d806      	bhi.n	8003910 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003902:	f7ff f9c5 	bl	8002c90 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ffa1 	bl	8003850 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800390e:	e024      	b.n	800395a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <prvProcessTimerOrBlockTask+0x90>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <prvProcessTimerOrBlockTask+0x50>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <prvProcessTimerOrBlockTask+0x52>
 8003924:	2300      	movs	r3, #0
 8003926:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <prvProcessTimerOrBlockTask+0x94>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4619      	mov	r1, r3
 8003936:	f7fe ff8d 	bl	8002854 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800393a:	f7ff f9a9 	bl	8002c90 <xTaskResumeAll>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <prvProcessTimerOrBlockTask+0x98>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
    }
 8003954:	e001      	b.n	800395a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003956:	f7ff f99b 	bl	8002c90 <xTaskResumeAll>
    }
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000023c 	.word	0x2000023c
 8003968:	20000240 	.word	0x20000240
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <prvGetNextExpireTime+0x44>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <prvGetNextExpireTime+0x16>
 8003982:	2201      	movs	r2, #1
 8003984:	e000      	b.n	8003988 <prvGetNextExpireTime+0x18>
 8003986:	2200      	movs	r2, #0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <prvGetNextExpireTime+0x44>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e001      	b.n	80039a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039a4:	68fb      	ldr	r3, [r7, #12]
    }
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000238 	.word	0x20000238

080039b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80039c0:	f7ff fa58 	bl	8002e74 <xTaskGetTickCount>
 80039c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <prvSampleTimeNow+0x3c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d205      	bcs.n	80039dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039d0:	f000 f912 	bl	8003bf8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e002      	b.n	80039e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvSampleTimeNow+0x3c>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039e8:	68fb      	ldr	r3, [r7, #12]
    }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000248 	.word	0x20000248

080039f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d812      	bhi.n	8003a44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e01b      	b.n	8003a6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <prvInsertTimerInActiveList+0x7c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fbc2 	bl	80021c6 <vListInsert>
 8003a42:	e012      	b.n	8003a6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d206      	bcs.n	8003a5a <prvInsertTimerInActiveList+0x62>
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e007      	b.n	8003a6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <prvInsertTimerInActiveList+0x80>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f7fe fbae 	bl	80021c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a6a:	697b      	ldr	r3, [r7, #20]
    }
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000023c 	.word	0x2000023c
 8003a78:	20000238 	.word	0x20000238

08003a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a82:	e0a6      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f2c0 80a3 	blt.w	8003bd2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fbcb 	bl	8002238 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff87 	bl	80039b8 <prvSampleTimeNow>
 8003aaa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 808d 	bhi.w	8003bd0 <prvProcessReceivedCommands+0x154>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <prvProcessReceivedCommands+0x40>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae1 	.word	0x08003ae1
 8003ac4:	08003b49 	.word	0x08003b49
 8003ac8:	08003b5d 	.word	0x08003b5d
 8003acc:	08003ba7 	.word	0x08003ba7
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae1 	.word	0x08003ae1
 8003ad8:	08003b49 	.word	0x08003b49
 8003adc:	08003b5d 	.word	0x08003b5d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	18d1      	adds	r1, r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	f7ff ff7a 	bl	80039f8 <prvInsertTimerInActiveList>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4413      	add	r3, r2
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4619      	mov	r1, r3
 8003b24:	69f8      	ldr	r0, [r7, #28]
 8003b26:	f7ff fe71 	bl	800380c <prvReloadTimer>
 8003b2a:	e008      	b.n	8003b3e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	69f8      	ldr	r0, [r7, #28]
 8003b44:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b46:	e044      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b5a:	e03a      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	617b      	str	r3, [r7, #20]
    }
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	18d1      	adds	r1, r2, r3
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	69f8      	ldr	r0, [r7, #28]
 8003ba0:	f7ff ff2a 	bl	80039f8 <prvInsertTimerInActiveList>
                        break;
 8003ba4:	e015      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003bb4:	69f8      	ldr	r0, [r7, #28]
 8003bb6:	f000 fc0b 	bl	80043d0 <vPortFree>
 8003bba:	e00a      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bce:	e000      	b.n	8003bd2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003bd0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <prvProcessReceivedCommands+0x178>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f107 0108 	add.w	r1, r7, #8
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fc4f 	bl	8002480 <xQueueReceive>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f af4d 	bne.w	8003a84 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000240 	.word	0x20000240

08003bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bfe:	e009      	b.n	8003c14 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <prvSwitchTimerLists+0x44>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	f7ff fe1e 	bl	8003850 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <prvSwitchTimerLists+0x44>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <prvSwitchTimerLists+0x44>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <prvSwitchTimerLists+0x48>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <prvSwitchTimerLists+0x44>)
 8003c2a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <prvSwitchTimerLists+0x48>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
    }
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000238 	.word	0x20000238
 8003c40:	2000023c 	.word	0x2000023c

08003c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c48:	f000 f9dc 	bl	8004004 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <prvCheckForValidListAndQueue+0x54>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11d      	bne.n	8003c90 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c54:	4811      	ldr	r0, [pc, #68]	; (8003c9c <prvCheckForValidListAndQueue+0x58>)
 8003c56:	f7fe fa89 	bl	800216c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c5a:	4811      	ldr	r0, [pc, #68]	; (8003ca0 <prvCheckForValidListAndQueue+0x5c>)
 8003c5c:	f7fe fa86 	bl	800216c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <prvCheckForValidListAndQueue+0x60>)
 8003c62:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <prvCheckForValidListAndQueue+0x58>)
 8003c64:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <prvCheckForValidListAndQueue+0x64>)
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <prvCheckForValidListAndQueue+0x5c>)
 8003c6a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	210c      	movs	r1, #12
 8003c70:	200a      	movs	r0, #10
 8003c72:	f7fe fb8d 	bl	8002390 <xQueueGenericCreate>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <prvCheckForValidListAndQueue+0x54>)
 8003c7a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <prvCheckForValidListAndQueue+0x54>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <prvCheckForValidListAndQueue+0x54>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4908      	ldr	r1, [pc, #32]	; (8003cac <prvCheckForValidListAndQueue+0x68>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fd8c 	bl	80027a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c90:	f000 f9e8 	bl	8004064 <vPortExitCritical>
    }
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000240 	.word	0x20000240
 8003c9c:	20000210 	.word	0x20000210
 8003ca0:	20000224 	.word	0x20000224
 8003ca4:	20000238 	.word	0x20000238
 8003ca8:	2000023c 	.word	0x2000023c
 8003cac:	08007190 	.word	0x08007190

08003cb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b04      	subs	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b04      	subs	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <pxPortInitialiseStack+0x64>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3b14      	subs	r3, #20
 8003cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b04      	subs	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f06f 0202 	mvn.w	r2, #2
 8003cfe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b20      	subs	r3, #32
 8003d04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	08003d19 	.word	0x08003d19

08003d18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <prvTaskExitError+0x54>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d00a      	beq.n	8003d42 <prvTaskExitError+0x2a>
        __asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
    }
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <prvTaskExitError+0x28>
        __asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60bb      	str	r3, [r7, #8]
    }
 8003d54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d56:	bf00      	nop
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0fc      	beq.n	8003d58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	20000010 	.word	0x20000010

08003d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <pxCurrentTCBConst2>)
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	6808      	ldr	r0, [r1, #0]
 8003d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	f380 8809 	msr	PSP, r0
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	4770      	bx	lr
 8003d8c:	f3af 8000 	nop.w

08003d90 <pxCurrentTCBConst2>:
 8003d90:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop

08003d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <prvPortStartFirstTask+0x24>)
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	f380 8808 	msr	MSP, r0
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8814 	msr	CONTROL, r0
 8003daa:	b662      	cpsie	i
 8003dac:	b661      	cpsie	f
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	df00      	svc	0
 8003db8:	bf00      	nop
 8003dba:	0000      	.short	0x0000
 8003dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop

08003dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dca:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <xPortStartScheduler+0x120>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a46      	ldr	r2, [pc, #280]	; (8003ee8 <xPortStartScheduler+0x124>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10a      	bne.n	8003dea <xPortStartScheduler+0x26>
        __asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	613b      	str	r3, [r7, #16]
    }
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dea:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <xPortStartScheduler+0x120>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <xPortStartScheduler+0x128>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10a      	bne.n	8003e0a <xPortStartScheduler+0x46>
        __asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60fb      	str	r3, [r7, #12]
    }
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <xPortStartScheduler+0x12c>)
 8003e0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	22ff      	movs	r2, #255	; 0xff
 8003e1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <xPortStartScheduler+0x130>)
 8003e30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e38:	e009      	b.n	8003e4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d0ef      	beq.n	8003e3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d00a      	beq.n	8003e7c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	60bb      	str	r3, [r7, #8]
    }
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <xPortStartScheduler+0x134>)
 8003e90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <xPortStartScheduler+0x138>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <xPortStartScheduler+0x138>)
 8003ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <xPortStartScheduler+0x138>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <xPortStartScheduler+0x138>)
 8003eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003eb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003eb2:	f000 f963 	bl	800417c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <xPortStartScheduler+0x13c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ebc:	f000 f982 	bl	80041c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <xPortStartScheduler+0x140>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <xPortStartScheduler+0x140>)
 8003ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003eca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ecc:	f7ff ff64 	bl	8003d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ed0:	f7ff f8ea 	bl	80030a8 <vTaskSwitchContext>
    prvTaskExitError();
 8003ed4:	f7ff ff20 	bl	8003d18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	410fc271 	.word	0x410fc271
 8003eec:	410fc270 	.word	0x410fc270
 8003ef0:	e000e400 	.word	0xe000e400
 8003ef4:	2000024c 	.word	0x2000024c
 8003ef8:	20000250 	.word	0x20000250
 8003efc:	e000ed20 	.word	0xe000ed20
 8003f00:	20000010 	.word	0x20000010
 8003f04:	e000ef34 	.word	0xe000ef34

08003f08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f0e:	4b37      	ldr	r3, [pc, #220]	; (8003fec <vInitPrioGroupValue+0xe4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a37      	ldr	r2, [pc, #220]	; (8003ff0 <vInitPrioGroupValue+0xe8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10a      	bne.n	8003f2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	613b      	str	r3, [r7, #16]
    }
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <vInitPrioGroupValue+0xe4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <vInitPrioGroupValue+0xec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10a      	bne.n	8003f4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <vInitPrioGroupValue+0xf0>)
 8003f50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <vInitPrioGroupValue+0xf4>)
 8003f74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003f78:	2207      	movs	r2, #7
 8003f7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7c:	e009      	b.n	8003f92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003f86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b80      	cmp	r3, #128	; 0x80
 8003f9c:	d0ef      	beq.n	8003f7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00a      	beq.n	8003fc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60bb      	str	r3, [r7, #8]
    }
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003fc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <vInitPrioGroupValue+0xf8>)
 8003fd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000ed00 	.word	0xe000ed00
 8003ff0:	410fc271 	.word	0x410fc271
 8003ff4:	410fc270 	.word	0x410fc270
 8003ff8:	e000e400 	.word	0xe000e400
 8003ffc:	2000024c 	.word	0x2000024c
 8004000:	20000250 	.word	0x20000250

08004004 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
        __asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	607b      	str	r3, [r7, #4]
    }
 800401c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <vPortEnterCritical+0x58>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	4a0d      	ldr	r2, [pc, #52]	; (800405c <vPortEnterCritical+0x58>)
 8004026:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <vPortEnterCritical+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10f      	bne.n	8004050 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <vPortEnterCritical+0x5c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <vPortEnterCritical+0x4c>
        __asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	603b      	str	r3, [r7, #0]
    }
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vPortEnterCritical+0x4a>
    }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	20000010 	.word	0x20000010
 8004060:	e000ed04 	.word	0xe000ed04

08004064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <vPortExitCritical+0x50>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <vPortExitCritical+0x24>
        __asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	607b      	str	r3, [r7, #4]
    }
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <vPortExitCritical+0x50>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <vPortExitCritical+0x50>)
 8004090:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <vPortExitCritical+0x50>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <vPortExitCritical+0x42>
 800409a:	2300      	movs	r3, #0
 800409c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000010 	.word	0x20000010
	...

080040c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040c0:	f3ef 8009 	mrs	r0, PSP
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <pxCurrentTCBConst>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f01e 0f10 	tst.w	lr, #16
 80040d0:	bf08      	it	eq
 80040d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	6010      	str	r0, [r2, #0]
 80040dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040e4:	f380 8811 	msr	BASEPRI, r0
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f7fe ffda 	bl	80030a8 <vTaskSwitchContext>
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f380 8811 	msr	BASEPRI, r0
 80040fc:	bc09      	pop	{r0, r3}
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	6808      	ldr	r0, [r1, #0]
 8004102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004106:	f01e 0f10 	tst.w	lr, #16
 800410a:	bf08      	it	eq
 800410c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004110:	f380 8809 	msr	PSP, r0
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst>:
 8004120:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
        __asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	607b      	str	r3, [r7, #4]
    }
 8004140:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004142:	f002 f865 	bl	8006210 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004146:	f7fe feb7 	bl	8002eb8 <xTaskIncrementTick>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004150:	f002 f8bc 	bl	80062cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <SysTick_Handler+0x50>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e001      	b.n	8004162 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800415e:	f002 f899 	bl	8006294 <SEGGER_SYSVIEW_RecordExitISR>
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f383 8811 	msr	BASEPRI, r3
    }
 800416c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <vPortSetupTimerInterrupt+0x34>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <vPortSetupTimerInterrupt+0x38>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <vPortSetupTimerInterrupt+0x3c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <vPortSetupTimerInterrupt+0x40>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <vPortSetupTimerInterrupt+0x44>)
 800419a:	3b01      	subs	r3, #1
 800419c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <vPortSetupTimerInterrupt+0x34>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010
 80041b4:	e000e018 	.word	0xe000e018
 80041b8:	20000000 	.word	0x20000000
 80041bc:	10624dd3 	.word	0x10624dd3
 80041c0:	e000e014 	.word	0xe000e014

080041c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041d4 <vPortEnableVFP+0x10>
 80041c8:	6801      	ldr	r1, [r0, #0]
 80041ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ce:	6001      	str	r1, [r0, #0]
 80041d0:	4770      	bx	lr
 80041d2:	0000      	.short	0x0000
 80041d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop

080041dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80041e2:	f3ef 8305 	mrs	r3, IPSR
 80041e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d914      	bls.n	8004218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <vPortValidateInterruptPriority+0x70>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <vPortValidateInterruptPriority+0x74>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	7afa      	ldrb	r2, [r7, #11]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d20a      	bcs.n	8004218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	607b      	str	r3, [r7, #4]
    }
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <vPortValidateInterruptPriority+0x78>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <vPortValidateInterruptPriority+0x7c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d90a      	bls.n	800423e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	603b      	str	r3, [r7, #0]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <vPortValidateInterruptPriority+0x60>
    }
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e3f0 	.word	0xe000e3f0
 8004250:	2000024c 	.word	0x2000024c
 8004254:	e000ed0c 	.word	0xe000ed0c
 8004258:	20000250 	.word	0x20000250

0800425c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004268:	f7fe fd04 	bl	8002c74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800426c:	4b53      	ldr	r3, [pc, #332]	; (80043bc <pvPortMalloc+0x160>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004274:	f000 f908 	bl	8004488 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d012      	beq.n	80042a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800427e:	2208      	movs	r2, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	3308      	adds	r3, #8
 800428a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	43db      	mvns	r3, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d804      	bhi.n	80042a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	4413      	add	r3, r2
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	e001      	b.n	80042a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db70      	blt.n	800438c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d06d      	beq.n	800438c <pvPortMalloc+0x130>
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <pvPortMalloc+0x164>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d868      	bhi.n	800438c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042ba:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <pvPortMalloc+0x168>)
 80042bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <pvPortMalloc+0x168>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042c4:	e004      	b.n	80042d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d903      	bls.n	80042e2 <pvPortMalloc+0x86>
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f1      	bne.n	80042c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042e2:	4b36      	ldr	r3, [pc, #216]	; (80043bc <pvPortMalloc+0x160>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d04f      	beq.n	800438c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2208      	movs	r2, #8
 80042f2:	4413      	add	r3, r2
 80042f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	2308      	movs	r3, #8
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	429a      	cmp	r2, r3
 800430c:	d91f      	bls.n	800434e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800430e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <pvPortMalloc+0xda>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
    }
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004348:	6978      	ldr	r0, [r7, #20]
 800434a:	f000 f8f9 	bl	8004540 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800434e:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <pvPortMalloc+0x164>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <pvPortMalloc+0x164>)
 800435a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <pvPortMalloc+0x164>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <pvPortMalloc+0x16c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d203      	bcs.n	8004370 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <pvPortMalloc+0x164>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <pvPortMalloc+0x16c>)
 800436e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <pvPortMalloc+0x170>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	4a10      	ldr	r2, [pc, #64]	; (80043cc <pvPortMalloc+0x170>)
 800438a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800438c:	f7fe fc80 	bl	8002c90 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <pvPortMalloc+0x154>
        __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
    }
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <pvPortMalloc+0x152>
    return pvReturn;
 80043b0:	69fb      	ldr	r3, [r7, #28]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3728      	adds	r7, #40	; 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20012e5c 	.word	0x20012e5c
 80043c0:	20012e60 	.word	0x20012e60
 80043c4:	20012e54 	.word	0x20012e54
 80043c8:	20012e64 	.word	0x20012e64
 80043cc:	20012e68 	.word	0x20012e68

080043d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d049      	beq.n	8004476 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043e2:	2308      	movs	r3, #8
 80043e4:	425b      	negs	r3, r3
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db0a      	blt.n	800440e <vPortFree+0x3e>
        __asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	60fb      	str	r3, [r7, #12]
    }
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <vPortFree+0x5c>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
    }
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0fdb      	lsrs	r3, r3, #31
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01c      	beq.n	8004476 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d118      	bne.n	8004476 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004450:	f7fe fc10 	bl	8002c74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <vPortFree+0xb0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4413      	add	r3, r2
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <vPortFree+0xb0>)
 8004460:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004462:	6938      	ldr	r0, [r7, #16]
 8004464:	f000 f86c 	bl	8004540 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <vPortFree+0xb4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <vPortFree+0xb4>)
 8004470:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004472:	f7fe fc0d 	bl	8002c90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004476:	bf00      	nop
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20012e60 	.word	0x20012e60
 8004484:	20012e6c 	.word	0x20012e6c

08004488 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800448e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004492:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <prvHeapInit+0xa4>)
 8004496:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3307      	adds	r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <prvHeapInit+0xa4>)
 80044b8:	4413      	add	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <prvHeapInit+0xa8>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <prvHeapInit+0xa8>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044d4:	2208      	movs	r2, #8
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a13      	ldr	r2, [pc, #76]	; (8004534 <prvHeapInit+0xac>)
 80044e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <prvHeapInit+0xac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <prvHeapInit+0xac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvHeapInit+0xac>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a08      	ldr	r2, [pc, #32]	; (8004538 <prvHeapInit+0xb0>)
 8004516:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <prvHeapInit+0xb4>)
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000254 	.word	0x20000254
 8004530:	20012e54 	.word	0x20012e54
 8004534:	20012e5c 	.word	0x20012e5c
 8004538:	20012e64 	.word	0x20012e64
 800453c:	20012e60 	.word	0x20012e60

08004540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <prvInsertBlockIntoFreeList+0xac>)
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e002      	b.n	8004554 <prvInsertBlockIntoFreeList+0x14>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d8f7      	bhi.n	800454e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d118      	bne.n	80045c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d00d      	beq.n	80045be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e008      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e003      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d002      	beq.n	80045de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20012e54 	.word	0x20012e54
 80045f0:	20012e5c 	.word	0x20012e5c

080045f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <_cbSendSystemDesc+0x14>)
 80045fa:	f001 fdb3 	bl	8006164 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80045fe:	4803      	ldr	r0, [pc, #12]	; (800460c <_cbSendSystemDesc+0x18>)
 8004600:	f001 fdb0 	bl	8006164 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	08007198 	.word	0x08007198
 800460c:	080071d8 	.word	0x080071d8

08004610 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <SEGGER_SYSVIEW_Conf+0x20>)
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <SEGGER_SYSVIEW_Conf+0x20>)
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <SEGGER_SYSVIEW_Conf+0x24>)
 800461e:	4a06      	ldr	r2, [pc, #24]	; (8004638 <SEGGER_SYSVIEW_Conf+0x28>)
 8004620:	f001 f91e 	bl	8005860 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004624:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004628:	f001 f95e 	bl	80058e8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000000 	.word	0x20000000
 8004634:	080045f5 	.word	0x080045f5
 8004638:	08007274 	.word	0x08007274

0800463c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463e:	b085      	sub	sp, #20
 8004640:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	e033      	b.n	80046b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004648:	491e      	ldr	r1, [pc, #120]	; (80046c4 <_cbSendTaskList+0x88>)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	491a      	ldr	r1, [pc, #104]	; (80046c4 <_cbSendTaskList+0x88>)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3304      	adds	r3, #4
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	4c16      	ldr	r4, [pc, #88]	; (80046c4 <_cbSendTaskList+0x88>)
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4423      	add	r3, r4
 8004678:	3308      	adds	r3, #8
 800467a:	681c      	ldr	r4, [r3, #0]
 800467c:	4d11      	ldr	r5, [pc, #68]	; (80046c4 <_cbSendTaskList+0x88>)
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	442b      	add	r3, r5
 800468a:	330c      	adds	r3, #12
 800468c:	681d      	ldr	r5, [r3, #0]
 800468e:	4e0d      	ldr	r6, [pc, #52]	; (80046c4 <_cbSendTaskList+0x88>)
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4433      	add	r3, r6
 800469c:	3310      	adds	r3, #16
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462b      	mov	r3, r5
 80046a4:	4622      	mov	r2, r4
 80046a6:	f000 f8bd 	bl	8004824 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3301      	adds	r3, #1
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <_cbSendTaskList+0x8c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3c6      	bcc.n	8004648 <_cbSendTaskList+0xc>
  }
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c4:	20012e70 	.word	0x20012e70
 80046c8:	20012f10 	.word	0x20012f10

080046cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80046d4:	f7fe fbde 	bl	8002e94 <xTaskGetTickCountFromISR>
 80046d8:	4603      	mov	r3, r0
 80046da:	2200      	movs	r2, #0
 80046dc:	469a      	mov	sl, r3
 80046de:	4693      	mov	fp, r2
 80046e0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80046e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	f04f 0a00 	mov.w	sl, #0
 80046f0:	f04f 0b00 	mov.w	fp, #0
 80046f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80046f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80046fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004700:	4652      	mov	r2, sl
 8004702:	465b      	mov	r3, fp
 8004704:	1a14      	subs	r4, r2, r0
 8004706:	eb63 0501 	sbc.w	r5, r3, r1
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	00ab      	lsls	r3, r5, #2
 8004714:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004718:	00a2      	lsls	r2, r4, #2
 800471a:	4614      	mov	r4, r2
 800471c:	461d      	mov	r5, r3
 800471e:	eb14 0800 	adds.w	r8, r4, r0
 8004722:	eb45 0901 	adc.w	r9, r5, r1
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473a:	4690      	mov	r8, r2
 800473c:	4699      	mov	r9, r3
 800473e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004742:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004754 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004762:	2205      	movs	r2, #5
 8004764:	492b      	ldr	r1, [pc, #172]	; (8004814 <SYSVIEW_AddTask+0xc0>)
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f002 f848 	bl	80067fc <memcmp>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04b      	beq.n	800480a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b07      	cmp	r3, #7
 8004778:	d903      	bls.n	8004782 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800477a:	4828      	ldr	r0, [pc, #160]	; (800481c <SYSVIEW_AddTask+0xc8>)
 800477c:	f001 ffae 	bl	80066dc <SEGGER_SYSVIEW_Warn>
    return;
 8004780:	e044      	b.n	800480c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004782:	4b25      	ldr	r3, [pc, #148]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4926      	ldr	r1, [pc, #152]	; (8004820 <SYSVIEW_AddTask+0xcc>)
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4921      	ldr	r1, [pc, #132]	; (8004820 <SYSVIEW_AddTask+0xcc>)
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3304      	adds	r3, #4
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	491b      	ldr	r1, [pc, #108]	; (8004820 <SYSVIEW_AddTask+0xcc>)
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3308      	adds	r3, #8
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4916      	ldr	r1, [pc, #88]	; (8004820 <SYSVIEW_AddTask+0xcc>)
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	330c      	adds	r3, #12
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4910      	ldr	r1, [pc, #64]	; (8004820 <SYSVIEW_AddTask+0xcc>)
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3310      	adds	r3, #16
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a08      	ldr	r2, [pc, #32]	; (8004818 <SYSVIEW_AddTask+0xc4>)
 80047f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f80e 	bl	8004824 <SYSVIEW_SendTaskInfo>
 8004808:	e000      	b.n	800480c <SYSVIEW_AddTask+0xb8>
    return;
 800480a:	bf00      	nop

}
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	080071e8 	.word	0x080071e8
 8004818:	20012f10 	.word	0x20012f10
 800481c:	080071f0 	.word	0x080071f0
 8004820:	20012e70 	.word	0x20012e70

08004824 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004832:	f107 0314 	add.w	r3, r7, #20
 8004836:	2214      	movs	r2, #20
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f001 ffee 	bl	800681c <memset>
  TaskInfo.TaskID     = TaskID;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fb8b 	bl	8005f74 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800485e:	bf00      	nop
 8004860:	3728      	adds	r7, #40	; 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <_DoInit+0xa0>)
 8004870:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004872:	22a8      	movs	r2, #168	; 0xa8
 8004874:	2100      	movs	r1, #0
 8004876:	6838      	ldr	r0, [r7, #0]
 8004878:	f001 ffd0 	bl	800681c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2203      	movs	r2, #3
 8004880:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2203      	movs	r2, #3
 8004886:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4a20      	ldr	r2, [pc, #128]	; (800490c <_DoInit+0xa4>)
 800488c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <_DoInit+0xa8>)
 8004892:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800489a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	; (800490c <_DoInit+0xa4>)
 80048b2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <_DoInit+0xac>)
 80048b8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80048d2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	e00c      	b.n	80048f6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1c3 030f 	rsb	r3, r3, #15
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <_DoInit+0xb0>)
 80048e4:	5cd1      	ldrb	r1, [r2, r3]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	460a      	mov	r2, r1
 80048ee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3301      	adds	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d9ef      	bls.n	80048dc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80048fc:	f3bf 8f5f 	dmb	sy
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20012f14 	.word	0x20012f14
 800490c:	08007240 	.word	0x08007240
 8004910:	20012fbc 	.word	0x20012fbc
 8004914:	200133bc 	.word	0x200133bc
 8004918:	0800727c 	.word	0x0800727c

0800491c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <SEGGER_RTT_ReadNoLock+0x108>)
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b53      	cmp	r3, #83	; 0x53
 8004934:	d001      	beq.n	800493a <SEGGER_RTT_ReadNoLock+0x1e>
 8004936:	f7ff ff97 	bl	8004868 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004948:	4413      	add	r3, r2
 800494a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	d92b      	bls.n	80049c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4293      	cmp	r3, r2
 8004978:	bf28      	it	cs
 800497a:	4613      	movcs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	4413      	add	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	6939      	ldr	r1, [r7, #16]
 800498c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498e:	f001 ff73 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 8004992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4413      	add	r3, r2
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4413      	add	r3, r2
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d101      	bne.n	80049c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80049bc:	2300      	movs	r3, #0
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bf28      	it	cs
 80049d0:	4613      	movcs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d019      	beq.n	8004a0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	4413      	add	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	6939      	ldr	r1, [r7, #16]
 80049e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049ea:	f001 ff45 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 80049ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4413      	add	r3, r2
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	4413      	add	r3, r2
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3730      	adds	r7, #48	; 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20012f14 	.word	0x20012f14

08004a28 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b53      	cmp	r3, #83	; 0x53
 8004a42:	d001      	beq.n	8004a48 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a44:	f7ff ff10 	bl	8004868 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a48:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4c:	f04f 0120 	mov.w	r1, #32
 8004a50:	f381 8811 	msr	BASEPRI, r1
 8004a54:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a58:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004a5e:	6939      	ldr	r1, [r7, #16]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3304      	adds	r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	dbeb      	blt.n	8004a5e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004a86:	e000      	b.n	8004a8a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004a88:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	da3f      	bge.n	8004b14 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004a94:	6939      	ldr	r1, [r7, #16]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004aa8:	6939      	ldr	r1, [r7, #16]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3304      	adds	r3, #4
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004abe:	6939      	ldr	r1, [r7, #16]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	440b      	add	r3, r1
 8004acc:	3320      	adds	r3, #32
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004ad2:	6939      	ldr	r1, [r7, #16]
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	440b      	add	r3, r1
 8004ae0:	3328      	adds	r3, #40	; 0x28
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ae6:	6939      	ldr	r1, [r7, #16]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	440b      	add	r3, r1
 8004af4:	3324      	adds	r3, #36	; 0x24
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	332c      	adds	r3, #44	; 0x2c
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b0e:	f3bf 8f5f 	dmb	sy
 8004b12:	e002      	b.n	8004b1a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b20:	69fb      	ldr	r3, [r7, #28]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20012f14 	.word	0x20012f14

08004b30 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004b3e:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b53      	cmp	r3, #83	; 0x53
 8004b4a:	d001      	beq.n	8004b50 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004b4c:	f7ff fe8c 	bl	8004868 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004b52:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d82c      	bhi.n	8004bb4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5e:	f04f 0120 	mov.w	r1, #32
 8004b62:	f381 8811 	msr	BASEPRI, r1
 8004b66:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	3360      	adds	r3, #96	; 0x60
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ba4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	e002      	b.n	8004bba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20012f14 	.word	0x20012f14

08004bc8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	60fa      	str	r2, [r7, #12]
 8004bde:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d90a      	bls.n	8004bfc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004bea:	e007      	b.n	8004bfc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	1c53      	adds	r3, r2, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	60f9      	str	r1, [r7, #12]
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1e5a      	subs	r2, r3, #1
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <_EncodeStr+0x46>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ee      	bne.n	8004bec <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3307      	adds	r3, #7
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <_HandleIncomingPacket+0xd8>)
 8004c48:	7e1b      	ldrb	r3, [r3, #24]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	1cfb      	adds	r3, r7, #3
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7ff fe63 	bl	800491c <SEGGER_RTT_ReadNoLock>
 8004c56:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d057      	beq.n	8004d0e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d031      	beq.n	8004cc8 <_HandleIncomingPacket+0x88>
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	dc40      	bgt.n	8004cea <_HandleIncomingPacket+0xaa>
 8004c68:	2b07      	cmp	r3, #7
 8004c6a:	dc15      	bgt.n	8004c98 <_HandleIncomingPacket+0x58>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	dd3c      	ble.n	8004cea <_HandleIncomingPacket+0xaa>
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d839      	bhi.n	8004cea <_HandleIncomingPacket+0xaa>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <_HandleIncomingPacket+0x3c>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c9f 	.word	0x08004c9f
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cab 	.word	0x08004cab
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cbd 	.word	0x08004cbd
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d033      	beq.n	8004d04 <_HandleIncomingPacket+0xc4>
 8004c9c:	e025      	b.n	8004cea <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c9e:	f000 ffef 	bl	8005c80 <SEGGER_SYSVIEW_Start>
      break;
 8004ca2:	e034      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004ca4:	f001 f8a6 	bl	8005df4 <SEGGER_SYSVIEW_Stop>
      break;
 8004ca8:	e031      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004caa:	f001 fa7f 	bl	80061ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004cae:	e02e      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004cb0:	f001 fa44 	bl	800613c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004cb4:	e02b      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004cb6:	f001 f8c3 	bl	8005e40 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004cba:	e028      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004cbc:	f001 fcbc 	bl	8006638 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004cc0:	e025      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004cc2:	f001 fc9b 	bl	80065fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004cc6:	e022      	b.n	8004d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <_HandleIncomingPacket+0xd8>)
 8004cca:	7e1b      	ldrb	r3, [r3, #24]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	1cfb      	adds	r3, r7, #3
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f7ff fe22 	bl	800491c <SEGGER_RTT_ReadNoLock>
 8004cd8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fc00 	bl	80064e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004ce8:	e00e      	b.n	8004d08 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da0c      	bge.n	8004d0c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <_HandleIncomingPacket+0xd8>)
 8004cf4:	7e1b      	ldrb	r3, [r3, #24]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	1cfb      	adds	r3, r7, #3
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f7ff fe0d 	bl	800491c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004d02:	e003      	b.n	8004d0c <_HandleIncomingPacket+0xcc>
      break;
 8004d04:	bf00      	nop
 8004d06:	e002      	b.n	8004d0e <_HandleIncomingPacket+0xce>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <_HandleIncomingPacket+0xce>
      break;
 8004d0c:	bf00      	nop
    }
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200143d4 	.word	0x200143d4

08004d1c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d22:	2301      	movs	r3, #1
 8004d24:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d30:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	e00b      	b.n	8004d50 <_TrySendOverflowPacket+0x34>
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	09db      	lsrs	r3, r3, #7
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b7f      	cmp	r3, #127	; 0x7f
 8004d54:	d8f0      	bhi.n	8004d38 <_TrySendOverflowPacket+0x1c>
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d66:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <_TrySendOverflowPacket+0xe0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d6c:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e00b      	b.n	8004d98 <_TrySendOverflowPacket+0x7c>
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6279      	str	r1, [r7, #36]	; 0x24
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <_TrySendOverflowPacket+0x64>
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	627a      	str	r2, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	4618      	mov	r0, r3
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fb fa06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e004      	b.n	8004dec <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a03      	ldr	r2, [pc, #12]	; (8004df8 <_TrySendOverflowPacket+0xdc>)
 8004dea:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dec:	693b      	ldr	r3, [r7, #16]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200143d4 	.word	0x200143d4
 8004dfc:	e0001004 	.word	0xe0001004

08004e00 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004e0c:	4b98      	ldr	r3, [pc, #608]	; (8005070 <_SendPacket+0x270>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d010      	beq.n	8004e36 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004e14:	4b96      	ldr	r3, [pc, #600]	; (8005070 <_SendPacket+0x270>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 812d 	beq.w	8005078 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004e1e:	4b94      	ldr	r3, [pc, #592]	; (8005070 <_SendPacket+0x270>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d109      	bne.n	8004e3a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e26:	f7ff ff79 	bl	8004d1c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <_SendPacket+0x270>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f040 8124 	bne.w	800507c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004e34:	e001      	b.n	8004e3a <_SendPacket+0x3a>
    goto Send;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <_SendPacket+0x3c>
Send:
 8004e3a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b1f      	cmp	r3, #31
 8004e40:	d809      	bhi.n	8004e56 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e42:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <_SendPacket+0x270>)
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 8115 	bne.w	8005080 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b17      	cmp	r3, #23
 8004e5a:	d807      	bhi.n	8004e6c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e0c4      	b.n	8004ff6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b7f      	cmp	r3, #127	; 0x7f
 8004e78:	d912      	bls.n	8004ea0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	09da      	lsrs	r2, r3, #7
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	3a01      	subs	r2, #1
 8004e92:	60fa      	str	r2, [r7, #12]
 8004e94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e006      	b.n	8004eae <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b7e      	cmp	r3, #126	; 0x7e
 8004eb2:	d807      	bhi.n	8004ec4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e098      	b.n	8004ff6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eca:	d212      	bcs.n	8004ef2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	09da      	lsrs	r2, r3, #7
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	3a01      	subs	r2, #1
 8004ee4:	60fa      	str	r2, [r7, #12]
 8004ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e081      	b.n	8004ff6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef8:	d21d      	bcs.n	8004f36 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0b9a      	lsrs	r2, r3, #14
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	09db      	lsrs	r3, r3, #7
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	3a01      	subs	r2, #1
 8004f14:	60fa      	str	r2, [r7, #12]
 8004f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	3a01      	subs	r2, #1
 8004f28:	60fa      	str	r2, [r7, #12]
 8004f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	e05f      	b.n	8004ff6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3c:	d228      	bcs.n	8004f90 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0d5a      	lsrs	r2, r3, #21
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0b9b      	lsrs	r3, r3, #14
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	3a01      	subs	r2, #1
 8004f58:	60fa      	str	r2, [r7, #12]
 8004f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	3a01      	subs	r2, #1
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e032      	b.n	8004ff6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0f1a      	lsrs	r2, r3, #28
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0d5b      	lsrs	r3, r3, #21
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0b9b      	lsrs	r3, r3, #14
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	60fa      	str	r2, [r7, #12]
 8004fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	60fa      	str	r2, [r7, #12]
 8004fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	3a01      	subs	r2, #1
 8004fea:	60fa      	str	r2, [r7, #12]
 8004fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <_SendPacket+0x274>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <_SendPacket+0x270>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	e00b      	b.n	8005028 <_SendPacket+0x228>
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	6279      	str	r1, [r7, #36]	; 0x24
 800501a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	09db      	lsrs	r3, r3, #7
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	2b7f      	cmp	r3, #127	; 0x7f
 800502c:	d8f0      	bhi.n	8005010 <_SendPacket+0x210>
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	627a      	str	r2, [r7, #36]	; 0x24
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <_SendPacket+0x270>)
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	4618      	mov	r0, r3
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	f7fb f8bf 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005052:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <_SendPacket+0x270>)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	60d3      	str	r3, [r2, #12]
 8005060:	e00f      	b.n	8005082 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <_SendPacket+0x270>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b01      	ldr	r3, [pc, #4]	; (8005070 <_SendPacket+0x270>)
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e008      	b.n	8005082 <_SendPacket+0x282>
 8005070:	200143d4 	.word	0x200143d4
 8005074:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <_SendPacket+0x282>
      goto SendDone;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <_SendPacket+0x282>
      goto SendDone;
 8005080:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <_SendPacket+0x2d4>)
 8005084:	7e1b      	ldrb	r3, [r3, #24]
 8005086:	4619      	mov	r1, r3
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <_SendPacket+0x2d8>)
 800508a:	460b      	mov	r3, r1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	440b      	add	r3, r1
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	336c      	adds	r3, #108	; 0x6c
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <_SendPacket+0x2d4>)
 800509a:	7e1b      	ldrb	r3, [r3, #24]
 800509c:	4618      	mov	r0, r3
 800509e:	490e      	ldr	r1, [pc, #56]	; (80050d8 <_SendPacket+0x2d8>)
 80050a0:	4603      	mov	r3, r0
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4403      	add	r3, r0
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	440b      	add	r3, r1
 80050aa:	3370      	adds	r3, #112	; 0x70
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d00b      	beq.n	80050ca <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <_SendPacket+0x2d4>)
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d107      	bne.n	80050ca <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <_SendPacket+0x2d4>)
 80050bc:	2201      	movs	r2, #1
 80050be:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80050c0:	f7ff fdbe 	bl	8004c40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <_SendPacket+0x2d4>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80050ca:	bf00      	nop
 80050cc:	3728      	adds	r7, #40	; 0x28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200143d4 	.word	0x200143d4
 80050d8:	20012f14 	.word	0x20012f14

080050dc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3301      	adds	r3, #1
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d80a      	bhi.n	800510c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6051      	str	r1, [r2, #4]
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d15a      	bne.n	80051ca <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	623b      	str	r3, [r7, #32]
 8005134:	e00b      	b.n	800514e <_StoreChar+0x72>
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	6279      	str	r1, [r7, #36]	; 0x24
 8005140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2b7f      	cmp	r3, #127	; 0x7f
 8005152:	d8f0      	bhi.n	8005136 <_StoreChar+0x5a>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	627a      	str	r2, [r7, #36]	; 0x24
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e00b      	b.n	8005186 <_StoreChar+0xaa>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	61f9      	str	r1, [r7, #28]
 8005178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	09db      	lsrs	r3, r3, #7
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b7f      	cmp	r3, #127	; 0x7f
 800518a:	d8f0      	bhi.n	800516e <_StoreChar+0x92>
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	61fa      	str	r2, [r7, #28]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	221a      	movs	r2, #26
 80051a2:	6939      	ldr	r1, [r7, #16]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fe2b 	bl	8004e00 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fd3a 	bl	8004c28 <_PreparePacket>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	611a      	str	r2, [r3, #16]
  }
}
 80051ca:	bf00      	nop
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80051e6:	2301      	movs	r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051ee:	e007      	b.n	8005200 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	623b      	str	r3, [r7, #32]
    Width++;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d2f3      	bcs.n	80051f0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	429a      	cmp	r2, r3
 800520e:	d901      	bls.n	8005214 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11f      	bne.n	800525e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01c      	beq.n	800525e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <_PrintUnsigned+0x66>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <_PrintUnsigned+0x66>
        c = '0';
 8005234:	2330      	movs	r3, #48	; 0x30
 8005236:	76fb      	strb	r3, [r7, #27]
 8005238:	e001      	b.n	800523e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800523a:	2320      	movs	r3, #32
 800523c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800523e:	e007      	b.n	8005250 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	3b01      	subs	r3, #1
 8005244:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005246:	7efb      	ldrb	r3, [r7, #27]
 8005248:	4619      	mov	r1, r3
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff ff46 	bl	80050dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <_PrintUnsigned+0x8a>
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	429a      	cmp	r2, r3
 800525c:	d3f0      	bcc.n	8005240 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d903      	bls.n	800526c <_PrintUnsigned+0x98>
      NumDigits--;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	e009      	b.n	8005280 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d200      	bcs.n	8005280 <_PrintUnsigned+0xac>
        break;
 800527e:	e005      	b.n	800528c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800528a:	e7e8      	b.n	800525e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <_PrintUnsigned+0x128>)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	4619      	mov	r1, r3
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ff14 	bl	80050dc <_StoreChar>
    Digit /= Base;
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e3      	bne.n	800528c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052d4:	e006      	b.n	80052e4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	3b01      	subs	r3, #1
 80052da:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80052dc:	2120      	movs	r1, #32
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fefc 	bl	80050dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <_PrintUnsigned+0x11e>
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3f1      	bcc.n	80052d6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3728      	adds	r7, #40	; 0x28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	0800729c 	.word	0x0800729c

08005300 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfb8      	it	lt
 8005314:	425b      	neglt	r3, r3
 8005316:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800531c:	e007      	b.n	800532e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	fb92 f3f3 	sdiv	r3, r2, r3
 8005326:	613b      	str	r3, [r7, #16]
    Width++;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3301      	adds	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	daf3      	bge.n	800531e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	429a      	cmp	r2, r3
 800533c:	d901      	bls.n	8005342 <_PrintInt+0x42>
    Width = NumDigits;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <_PrintInt+0x5e>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	db04      	blt.n	8005358 <_PrintInt+0x58>
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <_PrintInt+0x5e>
    FieldWidth--;
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	3b01      	subs	r3, #1
 800535c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <_PrintInt+0x6e>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d016      	beq.n	800539c <_PrintInt+0x9c>
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d111      	bne.n	800539c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800537e:	e006      	b.n	800538e <_PrintInt+0x8e>
        FieldWidth--;
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	3b01      	subs	r3, #1
 8005384:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005386:	2120      	movs	r1, #32
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fea7 	bl	80050dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <_PrintInt+0x9c>
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	429a      	cmp	r2, r3
 800539a:	d3f1      	bcc.n	8005380 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da07      	bge.n	80053b2 <_PrintInt+0xb2>
    v = -v;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	425b      	negs	r3, r3
 80053a6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80053a8:	212d      	movs	r1, #45	; 0x2d
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff fe96 	bl	80050dc <_StoreChar>
 80053b0:	e008      	b.n	80053c4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80053bc:	212b      	movs	r1, #43	; 0x2b
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff fe8c 	bl	80050dc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d019      	beq.n	8005402 <_PrintInt+0x102>
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d114      	bne.n	8005402 <_PrintInt+0x102>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d111      	bne.n	8005402 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053e4:	e006      	b.n	80053f4 <_PrintInt+0xf4>
        FieldWidth--;
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80053ec:	2130      	movs	r1, #48	; 0x30
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fe74 	bl	80050dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <_PrintInt+0x102>
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3f1      	bcc.n	80053e6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff fedf 	bl	80051d4 <_PrintUnsigned>
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b098      	sub	sp, #96	; 0x60
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800542c:	f3ef 8311 	mrs	r3, BASEPRI
 8005430:	f04f 0120 	mov.w	r1, #32
 8005434:	f381 8811 	msr	BASEPRI, r1
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543a:	48b7      	ldr	r0, [pc, #732]	; (8005718 <_VPrintTarget+0x2f8>)
 800543c:	f7ff fbf4 	bl	8004c28 <_PreparePacket>
 8005440:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005442:	4bb5      	ldr	r3, [pc, #724]	; (8005718 <_VPrintTarget+0x2f8>)
 8005444:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	3301      	adds	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 81a8 	beq.w	80057c0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005474:	2b25      	cmp	r3, #37	; 0x25
 8005476:	f040 8195 	bne.w	80057a4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800547a:	2300      	movs	r3, #0
 800547c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800548a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800548e:	3b23      	subs	r3, #35	; 0x23
 8005490:	2b0d      	cmp	r3, #13
 8005492:	d83f      	bhi.n	8005514 <_VPrintTarget+0xf4>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <_VPrintTarget+0x7c>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	08005505 	.word	0x08005505
 80054a0:	08005515 	.word	0x08005515
 80054a4:	08005515 	.word	0x08005515
 80054a8:	08005515 	.word	0x08005515
 80054ac:	08005515 	.word	0x08005515
 80054b0:	08005515 	.word	0x08005515
 80054b4:	08005515 	.word	0x08005515
 80054b8:	08005515 	.word	0x08005515
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	08005515 	.word	0x08005515
 80054c4:	080054d5 	.word	0x080054d5
 80054c8:	08005515 	.word	0x08005515
 80054cc:	08005515 	.word	0x08005515
 80054d0:	080054e5 	.word	0x080054e5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80054d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e01a      	b.n	800551a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	f043 0302 	orr.w	r3, r3, #2
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e012      	b.n	800551a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80054f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e00a      	b.n	800551a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005506:	f043 0308 	orr.w	r3, r3, #8
 800550a:	64bb      	str	r3, [r7, #72]	; 0x48
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e002      	b.n	800551a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005514:	2300      	movs	r3, #0
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
 8005518:	bf00      	nop
        }
      } while (v);
 800551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1b0      	bne.n	8005482 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005520:	2300      	movs	r3, #0
 8005522:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800552c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005530:	2b2f      	cmp	r3, #47	; 0x2f
 8005532:	d912      	bls.n	800555a <_VPrintTarget+0x13a>
 8005534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005538:	2b39      	cmp	r3, #57	; 0x39
 800553a:	d80e      	bhi.n	800555a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	461a      	mov	r2, r3
 800554e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005552:	4413      	add	r3, r2
 8005554:	3b30      	subs	r3, #48	; 0x30
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005558:	e7e4      	b.n	8005524 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800555a:	2300      	movs	r3, #0
 800555c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800556a:	2b2e      	cmp	r3, #46	; 0x2e
 800556c:	d11d      	bne.n	80055aa <_VPrintTarget+0x18a>
        sFormat++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800557c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005580:	2b2f      	cmp	r3, #47	; 0x2f
 8005582:	d912      	bls.n	80055aa <_VPrintTarget+0x18a>
 8005584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005588:	2b39      	cmp	r3, #57	; 0x39
 800558a:	d80e      	bhi.n	80055aa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	461a      	mov	r2, r3
 800559e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a2:	4413      	add	r3, r2
 80055a4:	3b30      	subs	r3, #48	; 0x30
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80055a8:	e7e4      	b.n	8005574 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80055b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055b6:	2b6c      	cmp	r3, #108	; 0x6c
 80055b8:	d003      	beq.n	80055c2 <_VPrintTarget+0x1a2>
 80055ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055be:	2b68      	cmp	r3, #104	; 0x68
 80055c0:	d107      	bne.n	80055d2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80055d0:	e7ef      	b.n	80055b2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80055d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055d6:	2b25      	cmp	r3, #37	; 0x25
 80055d8:	f000 80d8 	beq.w	800578c <_VPrintTarget+0x36c>
 80055dc:	2b25      	cmp	r3, #37	; 0x25
 80055de:	f2c0 80dc 	blt.w	800579a <_VPrintTarget+0x37a>
 80055e2:	2b78      	cmp	r3, #120	; 0x78
 80055e4:	f300 80d9 	bgt.w	800579a <_VPrintTarget+0x37a>
 80055e8:	2b58      	cmp	r3, #88	; 0x58
 80055ea:	f2c0 80d6 	blt.w	800579a <_VPrintTarget+0x37a>
 80055ee:	3b58      	subs	r3, #88	; 0x58
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	f200 80d2 	bhi.w	800579a <_VPrintTarget+0x37a>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <_VPrintTarget+0x1dc>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	080056f3 	.word	0x080056f3
 8005600:	0800579b 	.word	0x0800579b
 8005604:	0800579b 	.word	0x0800579b
 8005608:	0800579b 	.word	0x0800579b
 800560c:	0800579b 	.word	0x0800579b
 8005610:	0800579b 	.word	0x0800579b
 8005614:	0800579b 	.word	0x0800579b
 8005618:	0800579b 	.word	0x0800579b
 800561c:	0800579b 	.word	0x0800579b
 8005620:	0800579b 	.word	0x0800579b
 8005624:	0800579b 	.word	0x0800579b
 8005628:	08005681 	.word	0x08005681
 800562c:	080056a7 	.word	0x080056a7
 8005630:	0800579b 	.word	0x0800579b
 8005634:	0800579b 	.word	0x0800579b
 8005638:	0800579b 	.word	0x0800579b
 800563c:	0800579b 	.word	0x0800579b
 8005640:	0800579b 	.word	0x0800579b
 8005644:	0800579b 	.word	0x0800579b
 8005648:	0800579b 	.word	0x0800579b
 800564c:	0800579b 	.word	0x0800579b
 8005650:	0800579b 	.word	0x0800579b
 8005654:	0800579b 	.word	0x0800579b
 8005658:	0800579b 	.word	0x0800579b
 800565c:	08005767 	.word	0x08005767
 8005660:	0800579b 	.word	0x0800579b
 8005664:	0800579b 	.word	0x0800579b
 8005668:	0800571d 	.word	0x0800571d
 800566c:	0800579b 	.word	0x0800579b
 8005670:	080056cd 	.word	0x080056cd
 8005674:	0800579b 	.word	0x0800579b
 8005678:	0800579b 	.word	0x0800579b
 800567c:	080056f3 	.word	0x080056f3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	1d19      	adds	r1, r3, #4
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005694:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fd1c 	bl	80050dc <_StoreChar>
        break;
 80056a4:	e07a      	b.n	800579c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1d19      	adds	r1, r3, #4
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80056b4:	f107 0010 	add.w	r0, r7, #16
 80056b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c2:	220a      	movs	r2, #10
 80056c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056c6:	f7ff fe1b 	bl	8005300 <_PrintInt>
        break;
 80056ca:	e067      	b.n	800579c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1d19      	adds	r1, r3, #4
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80056da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056dc:	f107 0010 	add.w	r0, r7, #16
 80056e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	220a      	movs	r2, #10
 80056ec:	f7ff fd72 	bl	80051d4 <_PrintUnsigned>
        break;
 80056f0:	e054      	b.n	800579c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1d19      	adds	r1, r3, #4
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6011      	str	r1, [r2, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005702:	f107 0010 	add.w	r0, r7, #16
 8005706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	2210      	movs	r2, #16
 8005712:	f7ff fd5f 	bl	80051d4 <_PrintUnsigned>
        break;
 8005716:	e041      	b.n	800579c <_VPrintTarget+0x37c>
 8005718:	20014404 	.word	0x20014404
      case 's':
        s = va_arg(*pParamList, const char*);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	1d19      	adds	r1, r3, #4
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <_VPrintTarget+0x314>
          s = "(null)";
 8005730:	4b4a      	ldr	r3, [pc, #296]	; (800585c <_VPrintTarget+0x43c>)
 8005732:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	3301      	adds	r3, #1
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800574a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fcc1 	bl	80050dc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b7f      	cmp	r3, #127	; 0x7f
 800575e:	d9e9      	bls.n	8005734 <_VPrintTarget+0x314>
        break;
 8005760:	e01c      	b.n	800579c <_VPrintTarget+0x37c>
            break;
 8005762:	bf00      	nop
        break;
 8005764:	e01a      	b.n	800579c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1d19      	adds	r1, r3, #4
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6011      	str	r1, [r2, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005776:	f107 0010 	add.w	r0, r7, #16
 800577a:	2300      	movs	r3, #0
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	2308      	movs	r3, #8
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2308      	movs	r3, #8
 8005784:	2210      	movs	r2, #16
 8005786:	f7ff fd25 	bl	80051d4 <_PrintUnsigned>
        break;
 800578a:	e007      	b.n	800579c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	2125      	movs	r1, #37	; 0x25
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fca2 	bl	80050dc <_StoreChar>
        break;
 8005798:	e000      	b.n	800579c <_VPrintTarget+0x37c>
      default:
        break;
 800579a:	bf00      	nop
      }
      sFormat++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e007      	b.n	80057b4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80057a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fc94 	bl	80050dc <_StoreChar>
    }
  } while (*sFormat);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f ae4d 	bne.w	8005458 <_VPrintTarget+0x38>
 80057be:	e000      	b.n	80057c2 <_VPrintTarget+0x3a2>
      break;
 80057c0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d041      	beq.n	800584c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80057c8:	6a3a      	ldr	r2, [r7, #32]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d8:	e00b      	b.n	80057f2 <_VPrintTarget+0x3d2>
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	1c59      	adds	r1, r3, #1
 80057e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80057e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	09db      	lsrs	r3, r3, #7
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b7f      	cmp	r3, #127	; 0x7f
 80057f6:	d8f0      	bhi.n	80057da <_VPrintTarget+0x3ba>
 80057f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005806:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
 800580c:	2300      	movs	r3, #0
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
 8005810:	e00b      	b.n	800582a <_VPrintTarget+0x40a>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	b2da      	uxtb	r2, r3
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	6379      	str	r1, [r7, #52]	; 0x34
 800581c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	09db      	lsrs	r3, r3, #7
 8005828:	633b      	str	r3, [r7, #48]	; 0x30
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b7f      	cmp	r3, #127	; 0x7f
 800582e:	d8f0      	bhi.n	8005812 <_VPrintTarget+0x3f2>
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	637a      	str	r2, [r7, #52]	; 0x34
 8005836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	221a      	movs	r2, #26
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fada 	bl	8004e00 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005852:	bf00      	nop
 8005854:	3758      	adds	r7, #88	; 0x58
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	0800724c 	.word	0x0800724c

08005860 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800586e:	2300      	movs	r3, #0
 8005870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005874:	4917      	ldr	r1, [pc, #92]	; (80058d4 <SEGGER_SYSVIEW_Init+0x74>)
 8005876:	4818      	ldr	r0, [pc, #96]	; (80058d8 <SEGGER_SYSVIEW_Init+0x78>)
 8005878:	f7ff f8d6 	bl	8004a28 <SEGGER_RTT_AllocUpBuffer>
 800587c:	4603      	mov	r3, r0
 800587e:	b2da      	uxtb	r2, r3
 8005880:	4b16      	ldr	r3, [pc, #88]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 8005882:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 8005886:	785a      	ldrb	r2, [r3, #1]
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 800588a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800588c:	4b13      	ldr	r3, [pc, #76]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 800588e:	7e1b      	ldrb	r3, [r3, #24]
 8005890:	4618      	mov	r0, r3
 8005892:	2300      	movs	r3, #0
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	2308      	movs	r3, #8
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <SEGGER_SYSVIEW_Init+0x80>)
 800589a:	490f      	ldr	r1, [pc, #60]	; (80058d8 <SEGGER_SYSVIEW_Init+0x78>)
 800589c:	f7ff f948 	bl	8004b30 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <SEGGER_SYSVIEW_Init+0x84>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058ac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80058ae:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80058b4:	4a09      	ldr	r2, [pc, #36]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80058c0:	4a06      	ldr	r2, [pc, #24]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <SEGGER_SYSVIEW_Init+0x7c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200133cc 	.word	0x200133cc
 80058d8:	08007254 	.word	0x08007254
 80058dc:	200143d4 	.word	0x200143d4
 80058e0:	200143cc 	.word	0x200143cc
 80058e4:	e0001004 	.word	0xe0001004

080058e8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6113      	str	r3, [r2, #16]
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200143d4 	.word	0x200143d4

08005908 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005910:	f3ef 8311 	mrs	r3, BASEPRI
 8005914:	f04f 0120 	mov.w	r1, #32
 8005918:	f381 8811 	msr	BASEPRI, r1
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4808      	ldr	r0, [pc, #32]	; (8005940 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005920:	f7ff f982 	bl	8004c28 <_PreparePacket>
 8005924:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f7ff fa68 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f383 8811 	msr	BASEPRI, r3
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20014404 	.word	0x20014404

08005944 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800594e:	f3ef 8311 	mrs	r3, BASEPRI
 8005952:	f04f 0120 	mov.w	r1, #32
 8005956:	f381 8811 	msr	BASEPRI, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	4816      	ldr	r0, [pc, #88]	; (80059b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800595e:	f7ff f963 	bl	8004c28 <_PreparePacket>
 8005962:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e00b      	b.n	800598a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	61f9      	str	r1, [r7, #28]
 800597c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	09db      	lsrs	r3, r3, #7
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b7f      	cmp	r3, #127	; 0x7f
 800598e:	d8f0      	bhi.n	8005972 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	6938      	ldr	r0, [r7, #16]
 80059a6:	f7ff fa2b 	bl	8004e00 <_SendPacket>
  RECORD_END();
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f383 8811 	msr	BASEPRI, r3
}
 80059b0:	bf00      	nop
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20014404 	.word	0x20014404

080059bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059c8:	f3ef 8311 	mrs	r3, BASEPRI
 80059cc:	f04f 0120 	mov.w	r1, #32
 80059d0:	f381 8811 	msr	BASEPRI, r1
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	4825      	ldr	r0, [pc, #148]	; (8005a6c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80059d8:	f7ff f926 	bl	8004c28 <_PreparePacket>
 80059dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ea:	e00b      	b.n	8005a04 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b7f      	cmp	r3, #127	; 0x7f
 8005a08:	d8f0      	bhi.n	80059ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	e00b      	b.n	8005a3c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	09db      	lsrs	r3, r3, #7
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a40:	d8f0      	bhi.n	8005a24 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	627a      	str	r2, [r7, #36]	; 0x24
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	69b8      	ldr	r0, [r7, #24]
 8005a58:	f7ff f9d2 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f383 8811 	msr	BASEPRI, r3
}
 8005a62:	bf00      	nop
 8005a64:	3730      	adds	r7, #48	; 0x30
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20014404 	.word	0x20014404

08005a70 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08e      	sub	sp, #56	; 0x38
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a82:	f04f 0120 	mov.w	r1, #32
 8005a86:	f381 8811 	msr	BASEPRI, r1
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	4832      	ldr	r0, [pc, #200]	; (8005b58 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005a8e:	f7ff f8cb 	bl	8004c28 <_PreparePacket>
 8005a92:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa0:	e00b      	b.n	8005aba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	6379      	str	r1, [r7, #52]	; 0x34
 8005aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	09db      	lsrs	r3, r3, #7
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b7f      	cmp	r3, #127	; 0x7f
 8005abe:	d8f0      	bhi.n	8005aa2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	e00b      	b.n	8005af2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	1c59      	adds	r1, r3, #1
 8005ae2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	09db      	lsrs	r3, r3, #7
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	2b7f      	cmp	r3, #127	; 0x7f
 8005af6:	d8f0      	bhi.n	8005ada <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	e00b      	b.n	8005b2a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	09db      	lsrs	r3, r3, #7
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2e:	d8f0      	bhi.n	8005b12 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	627a      	str	r2, [r7, #36]	; 0x24
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	6979      	ldr	r1, [r7, #20]
 8005b44:	69b8      	ldr	r0, [r7, #24]
 8005b46:	f7ff f95b 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f383 8811 	msr	BASEPRI, r3
}
 8005b50:	bf00      	nop
 8005b52:	3738      	adds	r7, #56	; 0x38
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20014404 	.word	0x20014404

08005b5c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b090      	sub	sp, #64	; 0x40
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6e:	f04f 0120 	mov.w	r1, #32
 8005b72:	f381 8811 	msr	BASEPRI, r1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	4840      	ldr	r0, [pc, #256]	; (8005c7c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005b7a:	f7ff f855 	bl	8004c28 <_PreparePacket>
 8005b7e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b8c:	e00b      	b.n	8005ba6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8005baa:	d8f0      	bhi.n	8005b8e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	6379      	str	r1, [r7, #52]	; 0x34
 8005bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2b7f      	cmp	r3, #127	; 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	637a      	str	r2, [r7, #52]	; 0x34
 8005bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfc:	e00b      	b.n	8005c16 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1a:	d8f0      	bhi.n	8005bfe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	e00b      	b.n	8005c4e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	69b8      	ldr	r0, [r7, #24]
 8005c6a:	f7ff f8c9 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f383 8811 	msr	BASEPRI, r3
}
 8005c74:	bf00      	nop
 8005c76:	3740      	adds	r7, #64	; 0x40
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20014404 	.word	0x20014404

08005c80 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c86:	4b58      	ldr	r3, [pc, #352]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c90:	f04f 0120 	mov.w	r1, #32
 8005c94:	f381 8811 	msr	BASEPRI, r1
 8005c98:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c9a:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	4952      	ldr	r1, [pc, #328]	; (8005dec <SEGGER_SYSVIEW_Start+0x16c>)
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fa94 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005cae:	200a      	movs	r0, #10
 8005cb0:	f7ff fe2a 	bl	8005908 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	484b      	ldr	r0, [pc, #300]	; (8005df0 <SEGGER_SYSVIEW_Start+0x170>)
 8005cc4:	f7fe ffb0 	bl	8004c28 <_PreparePacket>
 8005cc8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd2:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd8:	e00b      	b.n	8005cf2 <SEGGER_SYSVIEW_Start+0x72>
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf6:	d8f0      	bhi.n	8005cda <SEGGER_SYSVIEW_Start+0x5a>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	e00b      	b.n	8005d2c <SEGGER_SYSVIEW_Start+0xac>
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	09db      	lsrs	r3, r3, #7
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d30:	d8f0      	bhi.n	8005d14 <SEGGER_SYSVIEW_Start+0x94>
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	627a      	str	r2, [r7, #36]	; 0x24
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e00b      	b.n	8005d66 <SEGGER_SYSVIEW_Start+0xe6>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	61f9      	str	r1, [r7, #28]
 8005d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6a:	d8f0      	bhi.n	8005d4e <SEGGER_SYSVIEW_Start+0xce>
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e00b      	b.n	8005d9e <SEGGER_SYSVIEW_Start+0x11e>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	6179      	str	r1, [r7, #20]
 8005d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b7f      	cmp	r3, #127	; 0x7f
 8005da2:	d8f0      	bhi.n	8005d86 <SEGGER_SYSVIEW_Start+0x106>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	617a      	str	r2, [r7, #20]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005db4:	2218      	movs	r2, #24
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff f821 	bl	8004e00 <_SendPacket>
      RECORD_END();
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <SEGGER_SYSVIEW_Start+0x168>)
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005dd2:	f000 f9eb 	bl	80061ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005dd6:	f000 f9b1 	bl	800613c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005dda:	f000 fc2d 	bl	8006638 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005dde:	bf00      	nop
 8005de0:	3730      	adds	r7, #48	; 0x30
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200143d4 	.word	0x200143d4
 8005dec:	08007290 	.word	0x08007290
 8005df0:	20014404 	.word	0x20014404

08005df4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfe:	f04f 0120 	mov.w	r1, #32
 8005e02:	f381 8811 	msr	BASEPRI, r1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <SEGGER_SYSVIEW_Stop+0x44>)
 8005e0a:	f7fe ff0d 	bl	8004c28 <_PreparePacket>
 8005e0e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <SEGGER_SYSVIEW_Stop+0x48>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005e18:	220b      	movs	r2, #11
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6838      	ldr	r0, [r7, #0]
 8005e1e:	f7fe ffef 	bl	8004e00 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <SEGGER_SYSVIEW_Stop+0x48>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f383 8811 	msr	BASEPRI, r3
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20014404 	.word	0x20014404
 8005e3c:	200143d4 	.word	0x200143d4

08005e40 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e46:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4a:	f04f 0120 	mov.w	r1, #32
 8005e4e:	f381 8811 	msr	BASEPRI, r1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	4845      	ldr	r0, [pc, #276]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005e56:	f7fe fee7 	bl	8004c28 <_PreparePacket>
 8005e5a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e64:	4b42      	ldr	r3, [pc, #264]	; (8005f70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6a:	e00b      	b.n	8005e84 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	1c59      	adds	r1, r3, #1
 8005e74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	09db      	lsrs	r3, r3, #7
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2b7f      	cmp	r3, #127	; 0x7f
 8005e88:	d8f0      	bhi.n	8005e6c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9e:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	e00b      	b.n	8005ebe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	09db      	lsrs	r3, r3, #7
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec2:	d8f0      	bhi.n	8005ea6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e00b      	b.n	8005ef8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	61f9      	str	r1, [r7, #28]
 8005eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b7f      	cmp	r3, #127	; 0x7f
 8005efc:	d8f0      	bhi.n	8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	61fa      	str	r2, [r7, #28]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	e00b      	b.n	8005f30 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	6179      	str	r1, [r7, #20]
 8005f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	09db      	lsrs	r3, r3, #7
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d8f0      	bhi.n	8005f18 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	617a      	str	r2, [r7, #20]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f46:	2218      	movs	r2, #24
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f7fe ff58 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	4798      	blx	r3
  }
}
 8005f64:	bf00      	nop
 8005f66:	3730      	adds	r7, #48	; 0x30
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20014404 	.word	0x20014404
 8005f70:	200143d4 	.word	0x200143d4

08005f74 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b092      	sub	sp, #72	; 0x48
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f80:	f04f 0120 	mov.w	r1, #32
 8005f84:	f381 8811 	msr	BASEPRI, r1
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	486a      	ldr	r0, [pc, #424]	; (8006134 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f8c:	f7fe fe4c 	bl	8004c28 <_PreparePacket>
 8005f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b66      	ldr	r3, [pc, #408]	; (8006138 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	6479      	str	r1, [r7, #68]	; 0x44
 8005fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	647a      	str	r2, [r7, #68]	; 0x44
 8005fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7fe fdd5 	bl	8004bc8 <_EncodeStr>
 800601e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006020:	2209      	movs	r2, #9
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	6938      	ldr	r0, [r7, #16]
 8006026:	f7fe feeb 	bl	8004e00 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	637b      	str	r3, [r7, #52]	; 0x34
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b40      	ldr	r3, [pc, #256]	; (8006138 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
 800603e:	e00b      	b.n	8006058 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	6379      	str	r1, [r7, #52]	; 0x34
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	637a      	str	r2, [r7, #52]	; 0x34
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800609e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e00b      	b.n	80060cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1c59      	adds	r1, r3, #1
 80060bc:	6279      	str	r1, [r7, #36]	; 0x24
 80060be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	09db      	lsrs	r3, r3, #7
 80060ca:	623b      	str	r3, [r7, #32]
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b7f      	cmp	r3, #127	; 0x7f
 80060d0:	d8f0      	bhi.n	80060b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	627a      	str	r2, [r7, #36]	; 0x24
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	2300      	movs	r3, #0
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	e00b      	b.n	8006104 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	61f9      	str	r1, [r7, #28]
 80060f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	09db      	lsrs	r3, r3, #7
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b7f      	cmp	r3, #127	; 0x7f
 8006108:	d8f0      	bhi.n	80060ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	61fa      	str	r2, [r7, #28]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800611a:	2215      	movs	r2, #21
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	6938      	ldr	r0, [r7, #16]
 8006120:	f7fe fe6e 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f383 8811 	msr	BASEPRI, r3
}
 800612a:	bf00      	nop
 800612c:	3748      	adds	r7, #72	; 0x48
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20014404 	.word	0x20014404
 8006138:	200143d4 	.word	0x200143d4

0800613c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4798      	blx	r3
  }
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200143d4 	.word	0x200143d4

08006164 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800616c:	f3ef 8311 	mrs	r3, BASEPRI
 8006170:	f04f 0120 	mov.w	r1, #32
 8006174:	f381 8811 	msr	BASEPRI, r1
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	480b      	ldr	r0, [pc, #44]	; (80061a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800617c:	f7fe fd54 	bl	8004c28 <_PreparePacket>
 8006180:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	6938      	ldr	r0, [r7, #16]
 8006188:	f7fe fd1e 	bl	8004bc8 <_EncodeStr>
 800618c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800618e:	220e      	movs	r2, #14
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	6938      	ldr	r0, [r7, #16]
 8006194:	f7fe fe34 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20014404 	.word	0x20014404

080061ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01a      	beq.n	80061f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d015      	beq.n	80061f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4798      	blx	r3
 80061cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80061d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	000a      	movs	r2, r1
 80061e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061e2:	4613      	mov	r3, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4621      	mov	r1, r4
 80061e8:	200d      	movs	r0, #13
 80061ea:	f7ff fbe7 	bl	80059bc <SEGGER_SYSVIEW_RecordU32x2>
 80061ee:	e006      	b.n	80061fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4619      	mov	r1, r3
 80061f6:	200c      	movs	r0, #12
 80061f8:	f7ff fba4 	bl	8005944 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	200143d4 	.word	0x200143d4
 800620c:	e0001004 	.word	0xe0001004

08006210 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006216:	f3ef 8311 	mrs	r3, BASEPRI
 800621a:	f04f 0120 	mov.w	r1, #32
 800621e:	f381 8811 	msr	BASEPRI, r1
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4819      	ldr	r0, [pc, #100]	; (800628c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006226:	f7fe fcff 	bl	8004c28 <_PreparePacket>
 800622a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	e00b      	b.n	800625c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	6179      	str	r1, [r7, #20]
 800624e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	09db      	lsrs	r3, r3, #7
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b7f      	cmp	r3, #127	; 0x7f
 8006260:	d8f0      	bhi.n	8006244 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	617a      	str	r2, [r7, #20]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006272:	2202      	movs	r2, #2
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f7fe fdc2 	bl	8004e00 <_SendPacket>
  RECORD_END();
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f383 8811 	msr	BASEPRI, r3
}
 8006282:	bf00      	nop
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20014404 	.word	0x20014404
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800629a:	f3ef 8311 	mrs	r3, BASEPRI
 800629e:	f04f 0120 	mov.w	r1, #32
 80062a2:	f381 8811 	msr	BASEPRI, r1
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	4807      	ldr	r0, [pc, #28]	; (80062c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80062aa:	f7fe fcbd 	bl	8004c28 <_PreparePacket>
 80062ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80062b0:	2203      	movs	r2, #3
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	f7fe fda3 	bl	8004e00 <_SendPacket>
  RECORD_END();
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f383 8811 	msr	BASEPRI, r3
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20014404 	.word	0x20014404

080062cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	4807      	ldr	r0, [pc, #28]	; (8006300 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80062e2:	f7fe fca1 	bl	8004c28 <_PreparePacket>
 80062e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80062e8:	2212      	movs	r2, #18
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f7fe fd87 	bl	8004e00 <_SendPacket>
  RECORD_END();
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f383 8811 	msr	BASEPRI, r3
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20014404 	.word	0x20014404

08006304 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	f04f 0120 	mov.w	r1, #32
 8006312:	f381 8811 	msr	BASEPRI, r1
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	4807      	ldr	r0, [pc, #28]	; (8006338 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800631a:	f7fe fc85 	bl	8004c28 <_PreparePacket>
 800631e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006320:	2211      	movs	r2, #17
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6838      	ldr	r0, [r7, #0]
 8006326:	f7fe fd6b 	bl	8004e00 <_SendPacket>
  RECORD_END();
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f383 8811 	msr	BASEPRI, r3
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20014404 	.word	0x20014404

0800633c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006344:	f3ef 8311 	mrs	r3, BASEPRI
 8006348:	f04f 0120 	mov.w	r1, #32
 800634c:	f381 8811 	msr	BASEPRI, r1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	4819      	ldr	r0, [pc, #100]	; (80063b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006354:	f7fe fc68 	bl	8004c28 <_PreparePacket>
 8006358:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800635e:	4b17      	ldr	r3, [pc, #92]	; (80063bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	61f9      	str	r1, [r7, #28]
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	61fa      	str	r2, [r7, #28]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80063a0:	2208      	movs	r2, #8
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	6938      	ldr	r0, [r7, #16]
 80063a6:	f7fe fd2b 	bl	8004e00 <_SendPacket>
  RECORD_END();
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f383 8811 	msr	BASEPRI, r3
}
 80063b0:	bf00      	nop
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20014404 	.word	0x20014404
 80063bc:	200143d4 	.word	0x200143d4

080063c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063c8:	f3ef 8311 	mrs	r3, BASEPRI
 80063cc:	f04f 0120 	mov.w	r1, #32
 80063d0:	f381 8811 	msr	BASEPRI, r1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	4819      	ldr	r0, [pc, #100]	; (800643c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80063d8:	f7fe fc26 	bl	8004c28 <_PreparePacket>
 80063dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e00b      	b.n	800640e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	61f9      	str	r1, [r7, #28]
 8006400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	09db      	lsrs	r3, r3, #7
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b7f      	cmp	r3, #127	; 0x7f
 8006412:	d8f0      	bhi.n	80063f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	61fa      	str	r2, [r7, #28]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006424:	2204      	movs	r2, #4
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	6938      	ldr	r0, [r7, #16]
 800642a:	f7fe fce9 	bl	8004e00 <_SendPacket>
  RECORD_END();
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f383 8811 	msr	BASEPRI, r3
}
 8006434:	bf00      	nop
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20014404 	.word	0x20014404
 8006440:	200143d4 	.word	0x200143d4

08006444 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	f04f 0120 	mov.w	r1, #32
 8006454:	f381 8811 	msr	BASEPRI, r1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	4819      	ldr	r0, [pc, #100]	; (80064c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800645c:	f7fe fbe4 	bl	8004c28 <_PreparePacket>
 8006460:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006466:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e00b      	b.n	8006492 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	61f9      	str	r1, [r7, #28]
 8006484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	09db      	lsrs	r3, r3, #7
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b7f      	cmp	r3, #127	; 0x7f
 8006496:	d8f0      	bhi.n	800647a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	61fa      	str	r2, [r7, #28]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80064a8:	2206      	movs	r2, #6
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	6938      	ldr	r0, [r7, #16]
 80064ae:	f7fe fca7 	bl	8004e00 <_SendPacket>
  RECORD_END();
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f383 8811 	msr	BASEPRI, r3
}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20014404 	.word	0x20014404
 80064c4:	200143d4 	.word	0x200143d4

080064c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	1ad3      	subs	r3, r2, r3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	200143d4 	.word	0x200143d4

080064e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80064f2:	4b40      	ldr	r3, [pc, #256]	; (80065f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d077      	beq.n	80065ea <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80064fa:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
 8006504:	e008      	b.n	8006518 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	3301      	adds	r3, #1
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651c:	429a      	cmp	r2, r3
 800651e:	d3f2      	bcc.n	8006506 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006520:	e000      	b.n	8006524 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006522:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d055      	beq.n	80065d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	f04f 0120 	mov.w	r1, #32
 8006532:	f381 8811 	msr	BASEPRI, r1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	482f      	ldr	r0, [pc, #188]	; (80065f8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800653a:	f7fe fb75 	bl	8004c28 <_PreparePacket>
 800653e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	e00b      	b.n	8006566 <SEGGER_SYSVIEW_SendModule+0x7e>
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	6279      	str	r1, [r7, #36]	; 0x24
 8006558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	09db      	lsrs	r3, r3, #7
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	2b7f      	cmp	r3, #127	; 0x7f
 800656a:	d8f0      	bhi.n	800654e <SEGGER_SYSVIEW_SendModule+0x66>
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	627a      	str	r2, [r7, #36]	; 0x24
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e00b      	b.n	80065a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	61f9      	str	r1, [r7, #28]
 8006592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	09db      	lsrs	r3, r3, #7
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	d8f0      	bhi.n	8006588 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	61fa      	str	r2, [r7, #28]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2280      	movs	r2, #128	; 0x80
 80065bc:	4619      	mov	r1, r3
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7fe fb02 	bl	8004bc8 <_EncodeStr>
 80065c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065c6:	2216      	movs	r2, #22
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f7fe fc18 	bl	8004e00 <_SendPacket>
      RECORD_END();
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <SEGGER_SYSVIEW_SendModule+0x102>
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4798      	blx	r3
    }
  }
}
 80065ea:	bf00      	nop
 80065ec:	3730      	adds	r7, #48	; 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200143fc 	.word	0x200143fc
 80065f8:	20014404 	.word	0x20014404

080065fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00f      	beq.n	800662a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f2      	bne.n	8006610 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200143fc 	.word	0x200143fc

08006638 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800663e:	f3ef 8311 	mrs	r3, BASEPRI
 8006642:	f04f 0120 	mov.w	r1, #32
 8006646:	f381 8811 	msr	BASEPRI, r1
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	4817      	ldr	r0, [pc, #92]	; (80066ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800664e:	f7fe faeb 	bl	8004c28 <_PreparePacket>
 8006652:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	e00b      	b.n	800667c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	6179      	str	r1, [r7, #20]
 800666e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	09db      	lsrs	r3, r3, #7
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b7f      	cmp	r3, #127	; 0x7f
 8006680:	d8f0      	bhi.n	8006664 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	617a      	str	r2, [r7, #20]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006692:	221b      	movs	r2, #27
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	f7fe fbb2 	bl	8004e00 <_SendPacket>
  RECORD_END();
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f383 8811 	msr	BASEPRI, r3
}
 80066a2:	bf00      	nop
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20014404 	.word	0x20014404
 80066b0:	20014400 	.word	0x20014400

080066b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80066b4:	b40f      	push	{r0, r1, r2, r3}
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	461a      	mov	r2, r3
 80066c6:	2100      	movs	r1, #0
 80066c8:	6938      	ldr	r0, [r7, #16]
 80066ca:	f7fe fea9 	bl	8005420 <_VPrintTarget>
  va_end(ParamList);
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr

080066dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066e4:	f3ef 8311 	mrs	r3, BASEPRI
 80066e8:	f04f 0120 	mov.w	r1, #32
 80066ec:	f381 8811 	msr	BASEPRI, r1
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	4827      	ldr	r0, [pc, #156]	; (8006790 <SEGGER_SYSVIEW_Warn+0xb4>)
 80066f4:	f7fe fa98 	bl	8004c28 <_PreparePacket>
 80066f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066fa:	2280      	movs	r2, #128	; 0x80
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f7fe fa62 	bl	8004bc8 <_EncodeStr>
 8006704:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	2301      	movs	r3, #1
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	e00b      	b.n	8006728 <SEGGER_SYSVIEW_Warn+0x4c>
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	6279      	str	r1, [r7, #36]	; 0x24
 800671a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	09db      	lsrs	r3, r3, #7
 8006726:	623b      	str	r3, [r7, #32]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b7f      	cmp	r3, #127	; 0x7f
 800672c:	d8f0      	bhi.n	8006710 <SEGGER_SYSVIEW_Warn+0x34>
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	627a      	str	r2, [r7, #36]	; 0x24
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e00b      	b.n	8006760 <SEGGER_SYSVIEW_Warn+0x84>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	61f9      	str	r1, [r7, #28]
 8006752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b7f      	cmp	r3, #127	; 0x7f
 8006764:	d8f0      	bhi.n	8006748 <SEGGER_SYSVIEW_Warn+0x6c>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	61fa      	str	r2, [r7, #28]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006776:	221a      	movs	r2, #26
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f7fe fb40 	bl	8004e00 <_SendPacket>
  RECORD_END();
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f383 8811 	msr	BASEPRI, r3
}
 8006786:	bf00      	nop
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20014404 	.word	0x20014404

08006794 <sniprintf>:
 8006794:	b40c      	push	{r2, r3}
 8006796:	b530      	push	{r4, r5, lr}
 8006798:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <sniprintf+0x64>)
 800679a:	1e0c      	subs	r4, r1, #0
 800679c:	681d      	ldr	r5, [r3, #0]
 800679e:	b09d      	sub	sp, #116	; 0x74
 80067a0:	da08      	bge.n	80067b4 <sniprintf+0x20>
 80067a2:	238b      	movs	r3, #139	; 0x8b
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	b01d      	add	sp, #116	; 0x74
 80067ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067b0:	b002      	add	sp, #8
 80067b2:	4770      	bx	lr
 80067b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067bc:	bf14      	ite	ne
 80067be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067c2:	4623      	moveq	r3, r4
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067cc:	9002      	str	r0, [sp, #8]
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067d6:	ab21      	add	r3, sp, #132	; 0x84
 80067d8:	a902      	add	r1, sp, #8
 80067da:	4628      	mov	r0, r5
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	f000 f9ab 	bl	8006b38 <_svfiprintf_r>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	bfbc      	itt	lt
 80067e6:	238b      	movlt	r3, #139	; 0x8b
 80067e8:	602b      	strlt	r3, [r5, #0]
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	d0dd      	beq.n	80067aa <sniprintf+0x16>
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e7d9      	b.n	80067aa <sniprintf+0x16>
 80067f6:	bf00      	nop
 80067f8:	20000060 	.word	0x20000060

080067fc <memcmp>:
 80067fc:	b510      	push	{r4, lr}
 80067fe:	3901      	subs	r1, #1
 8006800:	4402      	add	r2, r0
 8006802:	4290      	cmp	r0, r2
 8006804:	d101      	bne.n	800680a <memcmp+0xe>
 8006806:	2000      	movs	r0, #0
 8006808:	e005      	b.n	8006816 <memcmp+0x1a>
 800680a:	7803      	ldrb	r3, [r0, #0]
 800680c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006810:	42a3      	cmp	r3, r4
 8006812:	d001      	beq.n	8006818 <memcmp+0x1c>
 8006814:	1b18      	subs	r0, r3, r4
 8006816:	bd10      	pop	{r4, pc}
 8006818:	3001      	adds	r0, #1
 800681a:	e7f2      	b.n	8006802 <memcmp+0x6>

0800681c <memset>:
 800681c:	4402      	add	r2, r0
 800681e:	4603      	mov	r3, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <__libc_init_array>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4d0d      	ldr	r5, [pc, #52]	; (8006864 <__libc_init_array+0x38>)
 8006830:	4c0d      	ldr	r4, [pc, #52]	; (8006868 <__libc_init_array+0x3c>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	2600      	movs	r6, #0
 8006838:	42a6      	cmp	r6, r4
 800683a:	d109      	bne.n	8006850 <__libc_init_array+0x24>
 800683c:	4d0b      	ldr	r5, [pc, #44]	; (800686c <__libc_init_array+0x40>)
 800683e:	4c0c      	ldr	r4, [pc, #48]	; (8006870 <__libc_init_array+0x44>)
 8006840:	f000 fc78 	bl	8007134 <_init>
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	2600      	movs	r6, #0
 800684a:	42a6      	cmp	r6, r4
 800684c:	d105      	bne.n	800685a <__libc_init_array+0x2e>
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f855 3b04 	ldr.w	r3, [r5], #4
 8006854:	4798      	blx	r3
 8006856:	3601      	adds	r6, #1
 8006858:	e7ee      	b.n	8006838 <__libc_init_array+0xc>
 800685a:	f855 3b04 	ldr.w	r3, [r5], #4
 800685e:	4798      	blx	r3
 8006860:	3601      	adds	r6, #1
 8006862:	e7f2      	b.n	800684a <__libc_init_array+0x1e>
 8006864:	080072e8 	.word	0x080072e8
 8006868:	080072e8 	.word	0x080072e8
 800686c:	080072e8 	.word	0x080072e8
 8006870:	080072ec 	.word	0x080072ec

08006874 <__retarget_lock_acquire_recursive>:
 8006874:	4770      	bx	lr

08006876 <__retarget_lock_release_recursive>:
 8006876:	4770      	bx	lr

08006878 <memcpy>:
 8006878:	440a      	add	r2, r1
 800687a:	4291      	cmp	r1, r2
 800687c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006880:	d100      	bne.n	8006884 <memcpy+0xc>
 8006882:	4770      	bx	lr
 8006884:	b510      	push	{r4, lr}
 8006886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688e:	4291      	cmp	r1, r2
 8006890:	d1f9      	bne.n	8006886 <memcpy+0xe>
 8006892:	bd10      	pop	{r4, pc}

08006894 <_free_r>:
 8006894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006896:	2900      	cmp	r1, #0
 8006898:	d044      	beq.n	8006924 <_free_r+0x90>
 800689a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689e:	9001      	str	r0, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f1a1 0404 	sub.w	r4, r1, #4
 80068a6:	bfb8      	it	lt
 80068a8:	18e4      	addlt	r4, r4, r3
 80068aa:	f000 f8df 	bl	8006a6c <__malloc_lock>
 80068ae:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <_free_r+0x94>)
 80068b0:	9801      	ldr	r0, [sp, #4]
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x30>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	b003      	add	sp, #12
 80068bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c0:	f000 b8da 	b.w	8006a78 <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x46>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x22>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x50>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x46>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1855      	adds	r5, r2, r1
 80068e8:	42a5      	cmp	r5, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x70>
 80068ec:	6824      	ldr	r4, [r4, #0]
 80068ee:	4421      	add	r1, r4
 80068f0:	1854      	adds	r4, r2, r1
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x26>
 80068f8:	681c      	ldr	r4, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	6053      	str	r3, [r2, #4]
 80068fe:	440c      	add	r4, r1
 8006900:	6014      	str	r4, [r2, #0]
 8006902:	e7da      	b.n	80068ba <_free_r+0x26>
 8006904:	d902      	bls.n	800690c <_free_r+0x78>
 8006906:	230c      	movs	r3, #12
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x26>
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	1961      	adds	r1, r4, r5
 8006910:	428b      	cmp	r3, r1
 8006912:	bf04      	itt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	bf04      	itt	eq
 800691c:	1949      	addeq	r1, r1, r5
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	6054      	str	r4, [r2, #4]
 8006922:	e7ca      	b.n	80068ba <_free_r+0x26>
 8006924:	b003      	add	sp, #12
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	20014628 	.word	0x20014628

0800692c <sbrk_aligned>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4e0e      	ldr	r6, [pc, #56]	; (8006968 <sbrk_aligned+0x3c>)
 8006930:	460c      	mov	r4, r1
 8006932:	6831      	ldr	r1, [r6, #0]
 8006934:	4605      	mov	r5, r0
 8006936:	b911      	cbnz	r1, 800693e <sbrk_aligned+0x12>
 8006938:	f000 fba6 	bl	8007088 <_sbrk_r>
 800693c:	6030      	str	r0, [r6, #0]
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 fba1 	bl	8007088 <_sbrk_r>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d00a      	beq.n	8006960 <sbrk_aligned+0x34>
 800694a:	1cc4      	adds	r4, r0, #3
 800694c:	f024 0403 	bic.w	r4, r4, #3
 8006950:	42a0      	cmp	r0, r4
 8006952:	d007      	beq.n	8006964 <sbrk_aligned+0x38>
 8006954:	1a21      	subs	r1, r4, r0
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fb96 	bl	8007088 <_sbrk_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d101      	bne.n	8006964 <sbrk_aligned+0x38>
 8006960:	f04f 34ff 	mov.w	r4, #4294967295
 8006964:	4620      	mov	r0, r4
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	2001462c 	.word	0x2001462c

0800696c <_malloc_r>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	1ccd      	adds	r5, r1, #3
 8006972:	f025 0503 	bic.w	r5, r5, #3
 8006976:	3508      	adds	r5, #8
 8006978:	2d0c      	cmp	r5, #12
 800697a:	bf38      	it	cc
 800697c:	250c      	movcc	r5, #12
 800697e:	2d00      	cmp	r5, #0
 8006980:	4607      	mov	r7, r0
 8006982:	db01      	blt.n	8006988 <_malloc_r+0x1c>
 8006984:	42a9      	cmp	r1, r5
 8006986:	d905      	bls.n	8006994 <_malloc_r+0x28>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	2600      	movs	r6, #0
 800698e:	4630      	mov	r0, r6
 8006990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a68 <_malloc_r+0xfc>
 8006998:	f000 f868 	bl	8006a6c <__malloc_lock>
 800699c:	f8d8 3000 	ldr.w	r3, [r8]
 80069a0:	461c      	mov	r4, r3
 80069a2:	bb5c      	cbnz	r4, 80069fc <_malloc_r+0x90>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff ffc0 	bl	800692c <sbrk_aligned>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	4604      	mov	r4, r0
 80069b0:	d155      	bne.n	8006a5e <_malloc_r+0xf2>
 80069b2:	f8d8 4000 	ldr.w	r4, [r8]
 80069b6:	4626      	mov	r6, r4
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d145      	bne.n	8006a48 <_malloc_r+0xdc>
 80069bc:	2c00      	cmp	r4, #0
 80069be:	d048      	beq.n	8006a52 <_malloc_r+0xe6>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	4631      	mov	r1, r6
 80069c4:	4638      	mov	r0, r7
 80069c6:	eb04 0903 	add.w	r9, r4, r3
 80069ca:	f000 fb5d 	bl	8007088 <_sbrk_r>
 80069ce:	4581      	cmp	r9, r0
 80069d0:	d13f      	bne.n	8006a52 <_malloc_r+0xe6>
 80069d2:	6821      	ldr	r1, [r4, #0]
 80069d4:	1a6d      	subs	r5, r5, r1
 80069d6:	4629      	mov	r1, r5
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff ffa7 	bl	800692c <sbrk_aligned>
 80069de:	3001      	adds	r0, #1
 80069e0:	d037      	beq.n	8006a52 <_malloc_r+0xe6>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	442b      	add	r3, r5
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f8d8 3000 	ldr.w	r3, [r8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d038      	beq.n	8006a62 <_malloc_r+0xf6>
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	42a2      	cmp	r2, r4
 80069f4:	d12b      	bne.n	8006a4e <_malloc_r+0xe2>
 80069f6:	2200      	movs	r2, #0
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	e00f      	b.n	8006a1c <_malloc_r+0xb0>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	d41f      	bmi.n	8006a42 <_malloc_r+0xd6>
 8006a02:	2a0b      	cmp	r2, #11
 8006a04:	d917      	bls.n	8006a36 <_malloc_r+0xca>
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	6025      	str	r5, [r4, #0]
 8006a0c:	bf18      	it	ne
 8006a0e:	6059      	strne	r1, [r3, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	bf08      	it	eq
 8006a14:	f8c8 1000 	streq.w	r1, [r8]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f104 060b 	add.w	r6, r4, #11
 8006a22:	f000 f829 	bl	8006a78 <__malloc_unlock>
 8006a26:	f026 0607 	bic.w	r6, r6, #7
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	1af2      	subs	r2, r6, r3
 8006a2e:	d0ae      	beq.n	800698e <_malloc_r+0x22>
 8006a30:	1b9b      	subs	r3, r3, r6
 8006a32:	50a3      	str	r3, [r4, r2]
 8006a34:	e7ab      	b.n	800698e <_malloc_r+0x22>
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	6862      	ldr	r2, [r4, #4]
 8006a3a:	d1dd      	bne.n	80069f8 <_malloc_r+0x8c>
 8006a3c:	f8c8 2000 	str.w	r2, [r8]
 8006a40:	e7ec      	b.n	8006a1c <_malloc_r+0xb0>
 8006a42:	4623      	mov	r3, r4
 8006a44:	6864      	ldr	r4, [r4, #4]
 8006a46:	e7ac      	b.n	80069a2 <_malloc_r+0x36>
 8006a48:	4634      	mov	r4, r6
 8006a4a:	6876      	ldr	r6, [r6, #4]
 8006a4c:	e7b4      	b.n	80069b8 <_malloc_r+0x4c>
 8006a4e:	4613      	mov	r3, r2
 8006a50:	e7cc      	b.n	80069ec <_malloc_r+0x80>
 8006a52:	230c      	movs	r3, #12
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4638      	mov	r0, r7
 8006a58:	f000 f80e 	bl	8006a78 <__malloc_unlock>
 8006a5c:	e797      	b.n	800698e <_malloc_r+0x22>
 8006a5e:	6025      	str	r5, [r4, #0]
 8006a60:	e7dc      	b.n	8006a1c <_malloc_r+0xb0>
 8006a62:	605b      	str	r3, [r3, #4]
 8006a64:	deff      	udf	#255	; 0xff
 8006a66:	bf00      	nop
 8006a68:	20014628 	.word	0x20014628

08006a6c <__malloc_lock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__malloc_lock+0x8>)
 8006a6e:	f7ff bf01 	b.w	8006874 <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	20014624 	.word	0x20014624

08006a78 <__malloc_unlock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_unlock+0x8>)
 8006a7a:	f7ff befc 	b.w	8006876 <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20014624 	.word	0x20014624

08006a84 <__ssputs_r>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	688e      	ldr	r6, [r1, #8]
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	42be      	cmp	r6, r7
 8006a8e:	680b      	ldr	r3, [r1, #0]
 8006a90:	4682      	mov	sl, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	4690      	mov	r8, r2
 8006a96:	d82c      	bhi.n	8006af2 <__ssputs_r+0x6e>
 8006a98:	898a      	ldrh	r2, [r1, #12]
 8006a9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a9e:	d026      	beq.n	8006aee <__ssputs_r+0x6a>
 8006aa0:	6965      	ldr	r5, [r4, #20]
 8006aa2:	6909      	ldr	r1, [r1, #16]
 8006aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aa8:	eba3 0901 	sub.w	r9, r3, r1
 8006aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab0:	1c7b      	adds	r3, r7, #1
 8006ab2:	444b      	add	r3, r9
 8006ab4:	106d      	asrs	r5, r5, #1
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	bf38      	it	cc
 8006aba:	461d      	movcc	r5, r3
 8006abc:	0553      	lsls	r3, r2, #21
 8006abe:	d527      	bpl.n	8006b10 <__ssputs_r+0x8c>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7ff ff53 	bl	800696c <_malloc_r>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	b360      	cbz	r0, 8006b24 <__ssputs_r+0xa0>
 8006aca:	6921      	ldr	r1, [r4, #16]
 8006acc:	464a      	mov	r2, r9
 8006ace:	f7ff fed3 	bl	8006878 <memcpy>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	6126      	str	r6, [r4, #16]
 8006ae0:	6165      	str	r5, [r4, #20]
 8006ae2:	444e      	add	r6, r9
 8006ae4:	eba5 0509 	sub.w	r5, r5, r9
 8006ae8:	6026      	str	r6, [r4, #0]
 8006aea:	60a5      	str	r5, [r4, #8]
 8006aec:	463e      	mov	r6, r7
 8006aee:	42be      	cmp	r6, r7
 8006af0:	d900      	bls.n	8006af4 <__ssputs_r+0x70>
 8006af2:	463e      	mov	r6, r7
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	4632      	mov	r2, r6
 8006af8:	4641      	mov	r1, r8
 8006afa:	f000 faab 	bl	8007054 <memmove>
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	1b9b      	subs	r3, r3, r6
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	4433      	add	r3, r6
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b10:	462a      	mov	r2, r5
 8006b12:	f000 fac9 	bl	80070a8 <_realloc_r>
 8006b16:	4606      	mov	r6, r0
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d1e0      	bne.n	8006ade <__ssputs_r+0x5a>
 8006b1c:	6921      	ldr	r1, [r4, #16]
 8006b1e:	4650      	mov	r0, sl
 8006b20:	f7ff feb8 	bl	8006894 <_free_r>
 8006b24:	230c      	movs	r3, #12
 8006b26:	f8ca 3000 	str.w	r3, [sl]
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295
 8006b36:	e7e9      	b.n	8006b0c <__ssputs_r+0x88>

08006b38 <_svfiprintf_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	4698      	mov	r8, r3
 8006b3e:	898b      	ldrh	r3, [r1, #12]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	b09d      	sub	sp, #116	; 0x74
 8006b44:	4607      	mov	r7, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	d50e      	bpl.n	8006b6a <_svfiprintf_r+0x32>
 8006b4c:	690b      	ldr	r3, [r1, #16]
 8006b4e:	b963      	cbnz	r3, 8006b6a <_svfiprintf_r+0x32>
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	f7ff ff0b 	bl	800696c <_malloc_r>
 8006b56:	6028      	str	r0, [r5, #0]
 8006b58:	6128      	str	r0, [r5, #16]
 8006b5a:	b920      	cbnz	r0, 8006b66 <_svfiprintf_r+0x2e>
 8006b5c:	230c      	movs	r3, #12
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e0d0      	b.n	8006d08 <_svfiprintf_r+0x1d0>
 8006b66:	2340      	movs	r3, #64	; 0x40
 8006b68:	616b      	str	r3, [r5, #20]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	2320      	movs	r3, #32
 8006b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b78:	2330      	movs	r3, #48	; 0x30
 8006b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d20 <_svfiprintf_r+0x1e8>
 8006b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b82:	f04f 0901 	mov.w	r9, #1
 8006b86:	4623      	mov	r3, r4
 8006b88:	469a      	mov	sl, r3
 8006b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b8e:	b10a      	cbz	r2, 8006b94 <_svfiprintf_r+0x5c>
 8006b90:	2a25      	cmp	r2, #37	; 0x25
 8006b92:	d1f9      	bne.n	8006b88 <_svfiprintf_r+0x50>
 8006b94:	ebba 0b04 	subs.w	fp, sl, r4
 8006b98:	d00b      	beq.n	8006bb2 <_svfiprintf_r+0x7a>
 8006b9a:	465b      	mov	r3, fp
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7ff ff6f 	bl	8006a84 <__ssputs_r>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f000 80a9 	beq.w	8006cfe <_svfiprintf_r+0x1c6>
 8006bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bae:	445a      	add	r2, fp
 8006bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80a1 	beq.w	8006cfe <_svfiprintf_r+0x1c6>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc6:	f10a 0a01 	add.w	sl, sl, #1
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	9307      	str	r3, [sp, #28]
 8006bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8006bd4:	4654      	mov	r4, sl
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bdc:	4850      	ldr	r0, [pc, #320]	; (8006d20 <_svfiprintf_r+0x1e8>)
 8006bde:	f7f9 fb47 	bl	8000270 <memchr>
 8006be2:	9a04      	ldr	r2, [sp, #16]
 8006be4:	b9d8      	cbnz	r0, 8006c1e <_svfiprintf_r+0xe6>
 8006be6:	06d0      	lsls	r0, r2, #27
 8006be8:	bf44      	itt	mi
 8006bea:	2320      	movmi	r3, #32
 8006bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf0:	0711      	lsls	r1, r2, #28
 8006bf2:	bf44      	itt	mi
 8006bf4:	232b      	movmi	r3, #43	; 0x2b
 8006bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006c00:	d015      	beq.n	8006c2e <_svfiprintf_r+0xf6>
 8006c02:	9a07      	ldr	r2, [sp, #28]
 8006c04:	4654      	mov	r4, sl
 8006c06:	2000      	movs	r0, #0
 8006c08:	f04f 0c0a 	mov.w	ip, #10
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c12:	3b30      	subs	r3, #48	; 0x30
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	d94d      	bls.n	8006cb4 <_svfiprintf_r+0x17c>
 8006c18:	b1b0      	cbz	r0, 8006c48 <_svfiprintf_r+0x110>
 8006c1a:	9207      	str	r2, [sp, #28]
 8006c1c:	e014      	b.n	8006c48 <_svfiprintf_r+0x110>
 8006c1e:	eba0 0308 	sub.w	r3, r0, r8
 8006c22:	fa09 f303 	lsl.w	r3, r9, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	46a2      	mov	sl, r4
 8006c2c:	e7d2      	b.n	8006bd4 <_svfiprintf_r+0x9c>
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	1d19      	adds	r1, r3, #4
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	9103      	str	r1, [sp, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfbb      	ittet	lt
 8006c3a:	425b      	neglt	r3, r3
 8006c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c40:	9307      	strge	r3, [sp, #28]
 8006c42:	9307      	strlt	r3, [sp, #28]
 8006c44:	bfb8      	it	lt
 8006c46:	9204      	strlt	r2, [sp, #16]
 8006c48:	7823      	ldrb	r3, [r4, #0]
 8006c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c4c:	d10c      	bne.n	8006c68 <_svfiprintf_r+0x130>
 8006c4e:	7863      	ldrb	r3, [r4, #1]
 8006c50:	2b2a      	cmp	r3, #42	; 0x2a
 8006c52:	d134      	bne.n	8006cbe <_svfiprintf_r+0x186>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	9203      	str	r2, [sp, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bfb8      	it	lt
 8006c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c64:	3402      	adds	r4, #2
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d30 <_svfiprintf_r+0x1f8>
 8006c6c:	7821      	ldrb	r1, [r4, #0]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	4650      	mov	r0, sl
 8006c72:	f7f9 fafd 	bl	8000270 <memchr>
 8006c76:	b138      	cbz	r0, 8006c88 <_svfiprintf_r+0x150>
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	eba0 000a 	sub.w	r0, r0, sl
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	4082      	lsls	r2, r0
 8006c82:	4313      	orrs	r3, r2
 8006c84:	3401      	adds	r4, #1
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8c:	4825      	ldr	r0, [pc, #148]	; (8006d24 <_svfiprintf_r+0x1ec>)
 8006c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c92:	2206      	movs	r2, #6
 8006c94:	f7f9 faec 	bl	8000270 <memchr>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d038      	beq.n	8006d0e <_svfiprintf_r+0x1d6>
 8006c9c:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <_svfiprintf_r+0x1f0>)
 8006c9e:	bb1b      	cbnz	r3, 8006ce8 <_svfiprintf_r+0x1b0>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	3307      	adds	r3, #7
 8006ca4:	f023 0307 	bic.w	r3, r3, #7
 8006ca8:	3308      	adds	r3, #8
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cae:	4433      	add	r3, r6
 8006cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb2:	e768      	b.n	8006b86 <_svfiprintf_r+0x4e>
 8006cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb8:	460c      	mov	r4, r1
 8006cba:	2001      	movs	r0, #1
 8006cbc:	e7a6      	b.n	8006c0c <_svfiprintf_r+0xd4>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	9305      	str	r3, [sp, #20]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f04f 0c0a 	mov.w	ip, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	3a30      	subs	r2, #48	; 0x30
 8006cd2:	2a09      	cmp	r2, #9
 8006cd4:	d903      	bls.n	8006cde <_svfiprintf_r+0x1a6>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0c6      	beq.n	8006c68 <_svfiprintf_r+0x130>
 8006cda:	9105      	str	r1, [sp, #20]
 8006cdc:	e7c4      	b.n	8006c68 <_svfiprintf_r+0x130>
 8006cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e7f0      	b.n	8006cca <_svfiprintf_r+0x192>
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <_svfiprintf_r+0x1f4>)
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	1c42      	adds	r2, r0, #1
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	d1d6      	bne.n	8006cac <_svfiprintf_r+0x174>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	065b      	lsls	r3, r3, #25
 8006d02:	f53f af2d 	bmi.w	8006b60 <_svfiprintf_r+0x28>
 8006d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d08:	b01d      	add	sp, #116	; 0x74
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	ab03      	add	r3, sp, #12
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	462a      	mov	r2, r5
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <_svfiprintf_r+0x1f4>)
 8006d16:	a904      	add	r1, sp, #16
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f000 f879 	bl	8006e10 <_printf_i>
 8006d1e:	e7eb      	b.n	8006cf8 <_svfiprintf_r+0x1c0>
 8006d20:	080072ac 	.word	0x080072ac
 8006d24:	080072b6 	.word	0x080072b6
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	08006a85 	.word	0x08006a85
 8006d30:	080072b2 	.word	0x080072b2

08006d34 <_printf_common>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	4616      	mov	r6, r2
 8006d3a:	4699      	mov	r9, r3
 8006d3c:	688a      	ldr	r2, [r1, #8]
 8006d3e:	690b      	ldr	r3, [r1, #16]
 8006d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bfb8      	it	lt
 8006d48:	4613      	movlt	r3, r2
 8006d4a:	6033      	str	r3, [r6, #0]
 8006d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d50:	4607      	mov	r7, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	b10a      	cbz	r2, 8006d5a <_printf_common+0x26>
 8006d56:	3301      	adds	r3, #1
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	0699      	lsls	r1, r3, #26
 8006d5e:	bf42      	ittt	mi
 8006d60:	6833      	ldrmi	r3, [r6, #0]
 8006d62:	3302      	addmi	r3, #2
 8006d64:	6033      	strmi	r3, [r6, #0]
 8006d66:	6825      	ldr	r5, [r4, #0]
 8006d68:	f015 0506 	ands.w	r5, r5, #6
 8006d6c:	d106      	bne.n	8006d7c <_printf_common+0x48>
 8006d6e:	f104 0a19 	add.w	sl, r4, #25
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	6832      	ldr	r2, [r6, #0]
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	dc26      	bgt.n	8006dca <_printf_common+0x96>
 8006d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d80:	1e13      	subs	r3, r2, #0
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	bf18      	it	ne
 8006d86:	2301      	movne	r3, #1
 8006d88:	0692      	lsls	r2, r2, #26
 8006d8a:	d42b      	bmi.n	8006de4 <_printf_common+0xb0>
 8006d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d01e      	beq.n	8006dd8 <_printf_common+0xa4>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	6922      	ldr	r2, [r4, #16]
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	bf02      	ittt	eq
 8006da6:	68e5      	ldreq	r5, [r4, #12]
 8006da8:	6833      	ldreq	r3, [r6, #0]
 8006daa:	1aed      	subeq	r5, r5, r3
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	bf0c      	ite	eq
 8006db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db4:	2500      	movne	r5, #0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	bfc4      	itt	gt
 8006dba:	1a9b      	subgt	r3, r3, r2
 8006dbc:	18ed      	addgt	r5, r5, r3
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	341a      	adds	r4, #26
 8006dc2:	42b5      	cmp	r5, r6
 8006dc4:	d11a      	bne.n	8006dfc <_printf_common+0xc8>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	e008      	b.n	8006ddc <_printf_common+0xa8>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4652      	mov	r2, sl
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	47c0      	blx	r8
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d103      	bne.n	8006de0 <_printf_common+0xac>
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de0:	3501      	adds	r5, #1
 8006de2:	e7c6      	b.n	8006d72 <_printf_common+0x3e>
 8006de4:	18e1      	adds	r1, r4, r3
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	2030      	movs	r0, #48	; 0x30
 8006dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dee:	4422      	add	r2, r4
 8006df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df8:	3302      	adds	r3, #2
 8006dfa:	e7c7      	b.n	8006d8c <_printf_common+0x58>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4649      	mov	r1, r9
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c0      	blx	r8
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0e6      	beq.n	8006dd8 <_printf_common+0xa4>
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7d9      	b.n	8006dc2 <_printf_common+0x8e>
	...

08006e10 <_printf_i>:
 8006e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	7e0f      	ldrb	r7, [r1, #24]
 8006e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e18:	2f78      	cmp	r7, #120	; 0x78
 8006e1a:	4691      	mov	r9, r2
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	469a      	mov	sl, r3
 8006e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e26:	d807      	bhi.n	8006e38 <_printf_i+0x28>
 8006e28:	2f62      	cmp	r7, #98	; 0x62
 8006e2a:	d80a      	bhi.n	8006e42 <_printf_i+0x32>
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	f000 80d4 	beq.w	8006fda <_printf_i+0x1ca>
 8006e32:	2f58      	cmp	r7, #88	; 0x58
 8006e34:	f000 80c0 	beq.w	8006fb8 <_printf_i+0x1a8>
 8006e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e40:	e03a      	b.n	8006eb8 <_printf_i+0xa8>
 8006e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e46:	2b15      	cmp	r3, #21
 8006e48:	d8f6      	bhi.n	8006e38 <_printf_i+0x28>
 8006e4a:	a101      	add	r1, pc, #4	; (adr r1, 8006e50 <_printf_i+0x40>)
 8006e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e50:	08006ea9 	.word	0x08006ea9
 8006e54:	08006ebd 	.word	0x08006ebd
 8006e58:	08006e39 	.word	0x08006e39
 8006e5c:	08006e39 	.word	0x08006e39
 8006e60:	08006e39 	.word	0x08006e39
 8006e64:	08006e39 	.word	0x08006e39
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006e39 	.word	0x08006e39
 8006e70:	08006e39 	.word	0x08006e39
 8006e74:	08006e39 	.word	0x08006e39
 8006e78:	08006e39 	.word	0x08006e39
 8006e7c:	08006fc1 	.word	0x08006fc1
 8006e80:	08006ee9 	.word	0x08006ee9
 8006e84:	08006f7b 	.word	0x08006f7b
 8006e88:	08006e39 	.word	0x08006e39
 8006e8c:	08006e39 	.word	0x08006e39
 8006e90:	08006fe3 	.word	0x08006fe3
 8006e94:	08006e39 	.word	0x08006e39
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006e39 	.word	0x08006e39
 8006ea0:	08006e39 	.word	0x08006e39
 8006ea4:	08006f83 	.word	0x08006f83
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	1d1a      	adds	r2, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	602a      	str	r2, [r5, #0]
 8006eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e09f      	b.n	8006ffc <_printf_i+0x1ec>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	682b      	ldr	r3, [r5, #0]
 8006ec0:	0607      	lsls	r7, r0, #24
 8006ec2:	f103 0104 	add.w	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	d501      	bpl.n	8006ece <_printf_i+0xbe>
 8006eca:	681e      	ldr	r6, [r3, #0]
 8006ecc:	e003      	b.n	8006ed6 <_printf_i+0xc6>
 8006ece:	0646      	lsls	r6, r0, #25
 8006ed0:	d5fb      	bpl.n	8006eca <_printf_i+0xba>
 8006ed2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	da03      	bge.n	8006ee2 <_printf_i+0xd2>
 8006eda:	232d      	movs	r3, #45	; 0x2d
 8006edc:	4276      	negs	r6, r6
 8006ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee2:	485a      	ldr	r0, [pc, #360]	; (800704c <_printf_i+0x23c>)
 8006ee4:	230a      	movs	r3, #10
 8006ee6:	e012      	b.n	8006f0e <_printf_i+0xfe>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	1d19      	adds	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	0605      	lsls	r5, r0, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xe8>
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xee>
 8006ef8:	0641      	lsls	r1, r0, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe4>
 8006efc:	881e      	ldrh	r6, [r3, #0]
 8006efe:	4853      	ldr	r0, [pc, #332]	; (800704c <_printf_i+0x23c>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6865      	ldr	r5, [r4, #4]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90e      	cbnz	r6, 8006f24 <_printf_i+0x114>
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d04b      	beq.n	8006fbc <_printf_i+0x1ac>
 8006f24:	4615      	mov	r5, r2
 8006f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f34:	4637      	mov	r7, r6
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460e      	mov	r6, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x116>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x148>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07de      	lsls	r6, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x148>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee4 	bl	8006d34 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14a      	bne.n	8007006 <_printf_i+0x1f6>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	f043 0320 	orr.w	r3, r3, #32
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	4833      	ldr	r0, [pc, #204]	; (8007050 <_printf_i+0x240>)
 8006f84:	2778      	movs	r7, #120	; 0x78
 8006f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	6829      	ldr	r1, [r5, #0]
 8006f8e:	061f      	lsls	r7, r3, #24
 8006f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f94:	d402      	bmi.n	8006f9c <_printf_i+0x18c>
 8006f96:	065f      	lsls	r7, r3, #25
 8006f98:	bf48      	it	mi
 8006f9a:	b2b6      	uxthmi	r6, r6
 8006f9c:	07df      	lsls	r7, r3, #31
 8006f9e:	bf48      	it	mi
 8006fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa4:	6029      	str	r1, [r5, #0]
 8006fa6:	bf48      	it	mi
 8006fa8:	6023      	strmi	r3, [r4, #0]
 8006faa:	b91e      	cbnz	r6, 8006fb4 <_printf_i+0x1a4>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	f023 0320 	bic.w	r3, r3, #32
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	e7a7      	b.n	8006f08 <_printf_i+0xf8>
 8006fb8:	4824      	ldr	r0, [pc, #144]	; (800704c <_printf_i+0x23c>)
 8006fba:	e7e4      	b.n	8006f86 <_printf_i+0x176>
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	e7bd      	b.n	8006f3c <_printf_i+0x12c>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	6826      	ldr	r6, [r4, #0]
 8006fc4:	6961      	ldr	r1, [r4, #20]
 8006fc6:	1d18      	adds	r0, r3, #4
 8006fc8:	6028      	str	r0, [r5, #0]
 8006fca:	0635      	lsls	r5, r6, #24
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	d501      	bpl.n	8006fd4 <_printf_i+0x1c4>
 8006fd0:	6019      	str	r1, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <_printf_i+0x1ca>
 8006fd4:	0670      	lsls	r0, r6, #25
 8006fd6:	d5fb      	bpl.n	8006fd0 <_printf_i+0x1c0>
 8006fd8:	8019      	strh	r1, [r3, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	4615      	mov	r5, r2
 8006fe0:	e7bc      	b.n	8006f5c <_printf_i+0x14c>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	1d1a      	adds	r2, r3, #4
 8006fe6:	602a      	str	r2, [r5, #0]
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	2100      	movs	r1, #0
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7f9 f93e 	bl	8000270 <memchr>
 8006ff4:	b108      	cbz	r0, 8006ffa <_printf_i+0x1ea>
 8006ff6:	1b40      	subs	r0, r0, r5
 8006ff8:	6060      	str	r0, [r4, #4]
 8006ffa:	6863      	ldr	r3, [r4, #4]
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	2300      	movs	r3, #0
 8007000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007004:	e7aa      	b.n	8006f5c <_printf_i+0x14c>
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	462a      	mov	r2, r5
 800700a:	4649      	mov	r1, r9
 800700c:	4640      	mov	r0, r8
 800700e:	47d0      	blx	sl
 8007010:	3001      	adds	r0, #1
 8007012:	d0ad      	beq.n	8006f70 <_printf_i+0x160>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	079b      	lsls	r3, r3, #30
 8007018:	d413      	bmi.n	8007042 <_printf_i+0x232>
 800701a:	68e0      	ldr	r0, [r4, #12]
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	4298      	cmp	r0, r3
 8007020:	bfb8      	it	lt
 8007022:	4618      	movlt	r0, r3
 8007024:	e7a6      	b.n	8006f74 <_printf_i+0x164>
 8007026:	2301      	movs	r3, #1
 8007028:	4632      	mov	r2, r6
 800702a:	4649      	mov	r1, r9
 800702c:	4640      	mov	r0, r8
 800702e:	47d0      	blx	sl
 8007030:	3001      	adds	r0, #1
 8007032:	d09d      	beq.n	8006f70 <_printf_i+0x160>
 8007034:	3501      	adds	r5, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	9903      	ldr	r1, [sp, #12]
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	42ab      	cmp	r3, r5
 800703e:	dcf2      	bgt.n	8007026 <_printf_i+0x216>
 8007040:	e7eb      	b.n	800701a <_printf_i+0x20a>
 8007042:	2500      	movs	r5, #0
 8007044:	f104 0619 	add.w	r6, r4, #25
 8007048:	e7f5      	b.n	8007036 <_printf_i+0x226>
 800704a:	bf00      	nop
 800704c:	080072bd 	.word	0x080072bd
 8007050:	080072ce 	.word	0x080072ce

08007054 <memmove>:
 8007054:	4288      	cmp	r0, r1
 8007056:	b510      	push	{r4, lr}
 8007058:	eb01 0402 	add.w	r4, r1, r2
 800705c:	d902      	bls.n	8007064 <memmove+0x10>
 800705e:	4284      	cmp	r4, r0
 8007060:	4623      	mov	r3, r4
 8007062:	d807      	bhi.n	8007074 <memmove+0x20>
 8007064:	1e43      	subs	r3, r0, #1
 8007066:	42a1      	cmp	r1, r4
 8007068:	d008      	beq.n	800707c <memmove+0x28>
 800706a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007072:	e7f8      	b.n	8007066 <memmove+0x12>
 8007074:	4402      	add	r2, r0
 8007076:	4601      	mov	r1, r0
 8007078:	428a      	cmp	r2, r1
 800707a:	d100      	bne.n	800707e <memmove+0x2a>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007086:	e7f7      	b.n	8007078 <memmove+0x24>

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_sbrk_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f000 f840 	bl	8007118 <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20014620 	.word	0x20014620

080070a8 <_realloc_r>:
 80070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	4680      	mov	r8, r0
 80070ae:	4614      	mov	r4, r2
 80070b0:	460e      	mov	r6, r1
 80070b2:	b921      	cbnz	r1, 80070be <_realloc_r+0x16>
 80070b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b8:	4611      	mov	r1, r2
 80070ba:	f7ff bc57 	b.w	800696c <_malloc_r>
 80070be:	b92a      	cbnz	r2, 80070cc <_realloc_r+0x24>
 80070c0:	f7ff fbe8 	bl	8006894 <_free_r>
 80070c4:	4625      	mov	r5, r4
 80070c6:	4628      	mov	r0, r5
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	f000 f81b 	bl	8007106 <_malloc_usable_size_r>
 80070d0:	4284      	cmp	r4, r0
 80070d2:	4607      	mov	r7, r0
 80070d4:	d802      	bhi.n	80070dc <_realloc_r+0x34>
 80070d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070da:	d812      	bhi.n	8007102 <_realloc_r+0x5a>
 80070dc:	4621      	mov	r1, r4
 80070de:	4640      	mov	r0, r8
 80070e0:	f7ff fc44 	bl	800696c <_malloc_r>
 80070e4:	4605      	mov	r5, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0ed      	beq.n	80070c6 <_realloc_r+0x1e>
 80070ea:	42bc      	cmp	r4, r7
 80070ec:	4622      	mov	r2, r4
 80070ee:	4631      	mov	r1, r6
 80070f0:	bf28      	it	cs
 80070f2:	463a      	movcs	r2, r7
 80070f4:	f7ff fbc0 	bl	8006878 <memcpy>
 80070f8:	4631      	mov	r1, r6
 80070fa:	4640      	mov	r0, r8
 80070fc:	f7ff fbca 	bl	8006894 <_free_r>
 8007100:	e7e1      	b.n	80070c6 <_realloc_r+0x1e>
 8007102:	4635      	mov	r5, r6
 8007104:	e7df      	b.n	80070c6 <_realloc_r+0x1e>

08007106 <_malloc_usable_size_r>:
 8007106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710a:	1f18      	subs	r0, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfbc      	itt	lt
 8007110:	580b      	ldrlt	r3, [r1, r0]
 8007112:	18c0      	addlt	r0, r0, r3
 8007114:	4770      	bx	lr
	...

08007118 <_sbrk>:
 8007118:	4a04      	ldr	r2, [pc, #16]	; (800712c <_sbrk+0x14>)
 800711a:	6811      	ldr	r1, [r2, #0]
 800711c:	4603      	mov	r3, r0
 800711e:	b909      	cbnz	r1, 8007124 <_sbrk+0xc>
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <_sbrk+0x18>)
 8007122:	6011      	str	r1, [r2, #0]
 8007124:	6810      	ldr	r0, [r2, #0]
 8007126:	4403      	add	r3, r0
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	4770      	bx	lr
 800712c:	20014630 	.word	0x20014630
 8007130:	20014638 	.word	0x20014638

08007134 <_init>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr

08007140 <_fini>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr
